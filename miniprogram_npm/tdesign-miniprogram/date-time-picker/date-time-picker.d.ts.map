{"version":3,"sources":["../../src/date-time-picker/date-time-picker.ts"],"names":[],"mappings":"AACA,OAAO,KAAK,EAAE,KAAK,EAAE,MAAM,OAAO,CAAC;AAEnC,OAAO,EAAE,cAAc,EAAe,MAAM,qBAAqB,CAAC;AAQlE,aAAK,QAAQ;IACX,IAAI,SAAS;IACb,KAAK,UAAU;IACf,IAAI,SAAS;IACb,IAAI,SAAS;IACb,MAAM,WAAW;IACjB,MAAM,WAAW;CAClB;AASD,UAAU,eAAe;IACvB,KAAK,EAAE,MAAM,GAAG,MAAM,CAAC;IACvB,KAAK,EAAE,MAAM,GAAG,MAAM,CAAC;CACxB;AAGD,MAAM,CAAC,OAAO,OAAO,cAAe,SAAQ,cAAc;IACxD,UAAU,yCAAS;IAEnB,eAAe,WAAqG;IAEpH,OAAO;;MAEL;IAEF,SAAS;;;MAYP;IAEF,IAAI,MAAQ;IAEZ,IAAI;;;;;;;;;;;;;;;;;;MAOF;IAEF,eAAe;;;QAKb;IAEF,OAAO;;wBAWW,KAAK;sBAmBP,KAAK;sBAKL,KAAK;;mBAiBR,KAAK;uBAKD,KAAK,GAAG,KAAK;sBAOd,KAAK,QAAQ,MAAM,GAAG,KAAK;uBAS1B,KAAK,SAAS,MAAM,GAAG,KAAK;;;yCAsCf,eAAe,EAAE;gCAcrB,KAAK,GAAG,KAAK;2BAmBlB,eAAe,EAAE;yBAiBnB,eAAe,EAAE;;;2BAgDf,cAAc;;;;2BAOd,MAAM,EAAE;0BAaT,MAAM,QAAQ,QAAQ,GAAG,KAAK;0BA6B9B,6BAA6B;;;;;MAwD/C;IAGF,gBAAgB,CAAC,IAAI,KAAA;IAoBrB,uBAAuB,CAAC,UAAU,KAAA,EAAE,UAAU,KAAA;IAU9C,UAAU;CAIX","file":"date-time-picker.d.ts","sourcesContent":["import dayjs from 'dayjs';\nimport type { Dayjs } from 'dayjs';\nimport config from '../common/config';\nimport { SuperComponent, wxComponent } from '../common/src/index';\nimport defaultLocale from './locale/zh';\n\nimport props from './props';\n\nconst { prefix } = config;\nconst name = `${prefix}-date-time-picker`;\n\nenum ModeItem {\n  YEAR = 'year',\n  MONTH = 'month',\n  DATE = 'date',\n  HOUR = 'hour',\n  MINUTE = 'minute',\n  SECOND = 'second',\n}\n\nconst DATE_MODES = ['year', 'month', 'date'];\nconst TIME_MODES = ['hour', 'minute', 'second'];\nconst FULL_MODES = [...DATE_MODES, ...TIME_MODES];\n\nconst DEFAULT_MIN_DATE: Dayjs = dayjs('2000-01-01 00:00:00');\nconst DEFAULT_MAX_DATE: Dayjs = dayjs('2030-12-31 23:59:59');\n\ninterface ColumnItemValue {\n  value: string | number;\n  label: string | number;\n}\n\n@wxComponent()\nexport default class DateTimePicker extends SuperComponent {\n  properties = props;\n\n  externalClasses = [`${prefix}-class`, `${prefix}-class-confirm`, `${prefix}-class-cancel`, `${prefix}-class-title`];\n\n  options = {\n    multipleSlots: true,\n  };\n\n  observers = {\n    'start, end, value': function () {\n      this.updateColumns();\n    },\n\n    mode(m) {\n      const fullModes = this.getFullModeArray(m);\n      this.setData({\n        fullModes,\n      });\n      this.updateColumns();\n    },\n  };\n\n  date = null;\n\n  data = {\n    prefix,\n    classPrefix: name,\n    columns: [],\n    columnsValue: [],\n    fullModes: [],\n    locale: defaultLocale,\n  };\n\n  controlledProps = [\n    {\n      key: 'value',\n      event: 'change',\n    },\n  ];\n\n  methods = {\n    updateColumns() {\n      this.date = this.getParseDate();\n\n      const { columns, columnsValue } = this.getValueCols();\n      this.setData({\n        columns,\n        columnsValue,\n      });\n    },\n\n    getParseDate(): Dayjs {\n      const { value, defaultValue } = this.properties;\n      const minDate = this.getMinDate();\n\n      const isTimeMode = this.isTimeMode();\n      let currentValue = value || defaultValue;\n\n      // 时间需要补齐前缀\n      if (isTimeMode) {\n        const dateStr = dayjs(minDate).format('YYYY-MM-DD');\n        currentValue = dayjs(`${dateStr} ${currentValue}`);\n      }\n\n      const parseDate = dayjs(currentValue || minDate);\n      const isDateValid = parseDate.isValid();\n\n      return isDateValid ? parseDate : minDate;\n    },\n\n    getMinDate(): Dayjs {\n      const { start } = this.properties;\n      return start ? dayjs(start) : DEFAULT_MIN_DATE;\n    },\n\n    getMaxDate(): Dayjs {\n      const { end } = this.properties;\n      return end ? dayjs(end) : DEFAULT_MAX_DATE;\n    },\n\n    getDateRect(type = 'default') {\n      const map = {\n        min: 'getMinDate',\n        max: 'getMaxDate',\n        default: 'getDate',\n      };\n      const date = this[map[type]]();\n      const keys = ['year', 'month', 'date', 'hour', 'minute', 'second'];\n\n      return keys.map((k) => date[k]?.());\n    },\n\n    getDate(): Dayjs {\n      return this.clipDate(this?.date || DEFAULT_MIN_DATE);\n    },\n\n    // 数据裁减 确保数据不越界\n    clipDate(date: Dayjs): Dayjs {\n      const minDate: Dayjs = this.getMinDate();\n      const maxDate: Dayjs = this.getMaxDate();\n      return dayjs(Math.min(Math.max(minDate.valueOf(), date.valueOf()), maxDate.valueOf()));\n    },\n\n    // 年变化时 需要修正 日数据  例如 2 月的 28 | 29\n    setYear(date: Dayjs, year: number): Dayjs {\n      const beforeMonthDays = date.date();\n      const afterMonthDays = date.year(year).daysInMonth();\n\n      const tempDate = date.date(Math.min(beforeMonthDays.valueOf(), afterMonthDays.valueOf()));\n      return tempDate.year(year);\n    },\n\n    // 月变化时 需要修正 日数据边界\n    setMonth(date: Dayjs, month: number): Dayjs {\n      const beforeMonthDays = date.date();\n      const afterMonthDays = date.month(month).daysInMonth();\n\n      const tempDate = date.date(Math.min(beforeMonthDays.valueOf(), afterMonthDays.valueOf()));\n      return tempDate.month(month);\n    },\n\n    getColumnOptions() {\n      const { fullModes } = this.data;\n\n      const columnOptions = [];\n      fullModes?.forEach((mode) => {\n        const columnOption = this.getOptionByType(mode);\n        columnOptions.push(columnOption);\n      });\n\n      return columnOptions;\n    },\n\n    getOptionByType(type) {\n      const { locale } = this.data;\n      const options: ColumnItemValue[] = [];\n\n      const minEdge = this.getOptionEdge('min', type);\n      const maxEdge = this.getOptionEdge('max', type);\n\n      for (let i = minEdge; i <= maxEdge; i += 1) {\n        const label = type === 'month' ? i + 1 : i;\n        options.push({\n          value: `${i}`,\n          label: `${label + locale[type]}`,\n        });\n      }\n\n      return options;\n    },\n\n    getYearOptions(dateParams): ColumnItemValue[] {\n      const { locale } = this.data;\n      const { minDateYear, maxDateYear } = dateParams;\n\n      const years: ColumnItemValue[] = [];\n      for (let i = minDateYear; i <= maxDateYear; i += 1) {\n        years.push({\n          value: `${i}`,\n          label: `${i + locale.year}`,\n        });\n      }\n      return years;\n    },\n\n    getOptionEdge(minOrMax: 'min' | 'max', type) {\n      const selDateArray = this.getDateRect();\n      const compareArray = this.getDateRect(minOrMax);\n      const edge = {\n        month: [0, 11],\n        date: [1, this.getDate().daysInMonth()],\n        hour: [0, 23],\n        minute: [0, 59],\n        second: [0, 59],\n      };\n      const types = ['year', 'month', 'date', 'hour', 'minute', 'second'];\n\n      for (let i = 0, size = selDateArray.length; i < size; i += 1) {\n        if (types[i] === type) return compareArray[i];\n        if (compareArray[i] !== selDateArray[i]) return edge[type][minOrMax === 'min' ? 0 : 1];\n      }\n      return edge[type][minOrMax === 'min' ? 0 : 1];\n    },\n\n    getMonthOptions(): ColumnItemValue[] {\n      const { locale } = this.data;\n      const months: ColumnItemValue[] = [];\n\n      const minMonth = this.getOptionEdge('min', 'month');\n      const maxMonth = this.getOptionEdge('max', 'month');\n\n      for (let i = minMonth; i <= maxMonth; i += 1) {\n        months.push({\n          value: `${i}`,\n          label: `${i + 1 + locale.month}`,\n        });\n      }\n\n      return months;\n    },\n\n    getDayOptions(): ColumnItemValue[] {\n      const { locale } = this.data;\n      const days: ColumnItemValue[] = [];\n      const minDay = this.getOptionEdge('min', 'date');\n      const maxDay = this.getOptionEdge('max', 'date');\n\n      for (let i = minDay; i <= maxDay; i += 1) {\n        days.push({\n          value: `${i}`,\n          label: `${i + locale.day}`,\n        });\n      }\n\n      return days;\n    },\n\n    getHourOptions() {\n      const { locale } = this.data;\n      const hours: ColumnItemValue[] = [];\n      const minHour = this.getOptionEdge('min', 'hour');\n      const maxHour = this.getOptionEdge('max', 'hour');\n\n      for (let i = minHour; i <= maxHour; i += 1) {\n        hours.push({\n          value: `${i}`,\n          label: `${i + locale.hour}`,\n        });\n      }\n\n      return hours;\n    },\n\n    getMinuteOptions() {\n      const { locale } = this.data;\n      const minutes: ColumnItemValue[] = [];\n      const minMinute = this.getOptionEdge('min', 'minute');\n      const maxMinute = this.getOptionEdge('max', 'minute');\n\n      for (let i = minMinute; i <= maxMinute; i += 1) {\n        minutes.push({\n          value: `${i}`,\n          label: `${i + locale.minute}`,\n        });\n      }\n\n      return minutes;\n    },\n\n    getValueCols(this: DateTimePicker) {\n      return {\n        columns: this.getColumnOptions(),\n        columnsValue: this.getColumnsValue(),\n      };\n    },\n\n    getColumnsValue(): string[] {\n      const { fullModes } = this.data;\n      const date: Dayjs = this.getDate();\n\n      const columnsValue = [];\n\n      fullModes?.forEach((mode) => {\n        columnsValue.push(`${date[mode]()}`);\n      });\n\n      return columnsValue;\n    },\n\n    getNewDate(value: number, type: ModeItem): Dayjs {\n      let newValue: Dayjs = this.getDate();\n\n      switch (type) {\n        case ModeItem.YEAR:\n          newValue = this.setYear(newValue, value);\n          break;\n        case ModeItem.MONTH:\n          newValue = this.setMonth(newValue, value);\n          break;\n        case ModeItem.DATE:\n          newValue = newValue.date(value);\n          break;\n        case ModeItem.HOUR:\n          newValue = newValue.hour(value);\n          break;\n        case ModeItem.MINUTE:\n          newValue = newValue.minute(value);\n          break;\n        case ModeItem.SECOND:\n          newValue = newValue.second(value);\n          break;\n        default:\n          break;\n      }\n\n      return this.clipDate(newValue);\n    },\n\n    onColumnChange(e: WechatMiniprogram.CustomEvent) {\n      const { value, column } = e?.detail;\n      const { fullModes, format } = this.data;\n\n      const columnValue = value?.[column];\n      const columnType = fullModes?.[column];\n\n      const newValue = this.getNewDate(parseInt(columnValue, 10), columnType);\n\n      this.date = newValue;\n\n      const { columns, columnsValue } = this.getValueCols();\n\n      this.setData({\n        columns,\n        columnsValue,\n      });\n\n      const date = this.getDate();\n      const pickValue = format ? date.format(format) : date.valueOf();\n\n      this.triggerEvent('pick', { value: pickValue });\n    },\n\n    onConfirm() {\n      const { format } = this.properties;\n      const date = this.getDate();\n\n      const value = format ? date.format(format) : date.valueOf();\n      this._trigger('change', { value });\n      this.resetColumns();\n    },\n\n    onCancel() {\n      this.resetColumns();\n      this.triggerEvent('cancel');\n    },\n\n    onVisibleChange(e) {\n      if (!e.detail.visible) {\n        this.resetColumns();\n      }\n    },\n\n    resetColumns() {\n      const parseDate = this.getParseDate();\n\n      this.date = parseDate;\n\n      const { columns, columnsValue } = this.getValueCols();\n\n      this.setData({\n        columns,\n        columnsValue,\n      });\n    },\n  };\n\n  // 将简写的 mode 转化成枚举值\n  getFullModeArray(mode) {\n    // 简易模式\n    if (typeof mode === 'string' || mode instanceof String) {\n      return this.getFullModeByModeString(mode, FULL_MODES);\n    }\n\n    // 高级模式\n    if (Array.isArray(mode)) {\n      if (mode?.length === 1) {\n        return this.getFullModeByModeString(mode[0], FULL_MODES);\n      }\n\n      if (mode?.length === 2) {\n        const dateModes = this.getFullModeByModeString(mode[0], DATE_MODES);\n        const timeModes = this.getFullModeByModeString(mode[1], TIME_MODES);\n        return [...dateModes, ...timeModes];\n      }\n    }\n  }\n\n  getFullModeByModeString(modeString, matchModes) {\n    if (!modeString) {\n      return [];\n    }\n\n    const endIndex = matchModes?.findIndex((mode) => modeString === mode);\n    return matchModes?.slice(0, endIndex + 1);\n  }\n\n  // 仅展示时或者时分 需要单独特殊处理\n  isTimeMode() {\n    const { fullModes } = this.data;\n    return fullModes[0] === ModeItem.HOUR;\n  }\n}\n"]}