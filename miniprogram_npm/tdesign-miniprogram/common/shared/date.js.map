{"version":3,"sources":["../../src/common/shared/date.ts"],"names":[],"mappings":"AAEA,MAAM,CAAC,MAAM,WAAW,GAAG,CAAC,IAAmB,EAAE,EAAE;IACjD,MAAM,KAAK,GAAG,IAAI,IAAI,CAAC,IAAI,CAAC,CAAC;IAE7B,OAAO;QACL,IAAI,EAAE,KAAK,CAAC,WAAW,EAAE;QACzB,KAAK,EAAE,KAAK,CAAC,QAAQ,EAAE;QACvB,IAAI,EAAE,KAAK,CAAC,OAAO,EAAE;QACrB,GAAG,EAAE,KAAK,CAAC,MAAM,EAAE;QACnB,IAAI,EAAE,KAAK,CAAC,OAAO,EAAE;KACtB,CAAC;AACJ,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,UAAU,GAAG,CAAC,KAAkB,EAAE,KAAkB,EAAE,EAAE;IACnE,IAAI,KAAK,YAAY,IAAI,IAAI,OAAO,KAAK,KAAK,QAAQ;QAAE,KAAK,GAAG,WAAW,CAAC,KAAK,CAAC,CAAC;IACnF,IAAI,KAAK,YAAY,IAAI,IAAI,OAAO,KAAK,KAAK,QAAQ;QAAE,KAAK,GAAG,WAAW,CAAC,KAAK,CAAC,CAAC;IACnF,MAAM,IAAI,GAAG,CAAC,MAAM,EAAE,OAAO,EAAE,MAAM,CAAC,CAAC;IACvC,OAAO,IAAI,CAAC,KAAK,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,KAAK,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC;AACxD,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,gBAAgB,GAAG,CAAC,IAAmB,EAAE,EAAE;IACtD,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,WAAW,CAAC,IAAI,CAAC,CAAC;IAC1C,MAAM,QAAQ,GAAG,IAAI,IAAI,CAAC,IAAI,EAAE,KAAK,EAAE,CAAC,CAAC,CAAC;IAC1C,MAAM,iBAAiB,GAAG,QAAQ,CAAC,MAAM,EAAE,CAAC;IAC5C,MAAM,QAAQ,GAAG,IAAI,IAAI,CAAC,CAAC,IAAI,IAAI,CAAC,IAAI,EAAE,KAAK,GAAG,CAAC,EAAE,CAAC,CAAC,GAAG,EAAE,GAAG,IAAI,GAAG,IAAI,CAAC,CAAC,OAAO,EAAE,CAAC;IAEtF,OAAO;QACL,IAAI;QACJ,KAAK;QACL,iBAAiB;QACjB,QAAQ;KACT,CAAC;AACJ,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,WAAW,GAAG,CAAC,GAAG,EAAE,EAAE,CAAC,OAAO,GAAG,KAAK,QAAQ,IAAI,GAAG,YAAY,IAAI,CAAC;AAEnF,MAAM,CAAC,MAAM,OAAO,GAAG,CAAC,GAAG,IAAI,EAAE,EAAE;IACjC,MAAM,GAAG,GAAG,IAAI,IAAI,EAAE,CAAC;IACvB,IAAI,IAAI,CAAC,MAAM,KAAK,CAAC;QAAE,OAAO,GAAG,CAAC;IAClC,IAAI,IAAI,CAAC,MAAM,KAAK,CAAC,IAAI,IAAI,CAAC,CAAC,CAAC,IAAI,IAAI,EAAE;QACxC,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,GAAG,WAAW,CAAC,GAAG,CAAC,CAAC;QAC/C,OAAO,IAAI,IAAI,CAAC,IAAI,EAAE,KAAK,GAAG,IAAI,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC;KAC9C;IACD,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;AAChC,CAAC,CAAC","file":"date.js","sourcesContent":["export type CompareDate = Date | number | { year: number; month: number; date: number };\n\nexport const getDateRect = (date: Date | number) => {\n  const _date = new Date(date);\n\n  return {\n    year: _date.getFullYear(),\n    month: _date.getMonth(),\n    date: _date.getDate(),\n    day: _date.getDay(),\n    time: _date.getTime(),\n  };\n};\n\nexport const isSameDate = (date1: CompareDate, date2: CompareDate) => {\n  if (date1 instanceof Date || typeof date1 === 'number') date1 = getDateRect(date1);\n  if (date2 instanceof Date || typeof date2 === 'number') date2 = getDateRect(date2);\n  const keys = ['year', 'month', 'date'];\n  return keys.every((key) => date1[key] === date2[key]);\n};\n\nexport const getMonthDateRect = (date: Date | number) => {\n  const { year, month } = getDateRect(date);\n  const firstDay = new Date(year, month, 1);\n  const weekdayOfFirstDay = firstDay.getDay();\n  const lastDate = new Date(+new Date(year, month + 1, 1) - 24 * 3600 * 1000).getDate();\n\n  return {\n    year,\n    month,\n    weekdayOfFirstDay,\n    lastDate,\n  };\n};\n\nexport const isValidDate = (val) => typeof val === 'number' || val instanceof Date;\n\nexport const getDate = (...args) => {\n  const now = new Date();\n  if (args.length === 0) return now;\n  if (args.length === 1 && args[0] <= 1000) {\n    const { year, month, date } = getDateRect(now);\n    return new Date(year, month + args[0], date);\n  }\n  return Date.apply(null, args);\n};\n"]}