{"version":3,"sources":["../../src/common/shared/date.ts"],"names":[],"mappings":"AAAA,oBAAY,WAAW,GAAG,IAAI,GAAG,MAAM,GAAG;IAAE,IAAI,EAAE,MAAM,CAAC;IAAC,KAAK,EAAE,MAAM,CAAC;IAAC,IAAI,EAAE,MAAM,CAAA;CAAE,CAAC;AAExF,eAAO,MAAM,WAAW,SAAU,IAAI,GAAG,MAAM;;;;;;CAU9C,CAAC;AAEF,eAAO,MAAM,UAAU,UAAW,WAAW,SAAS,WAAW,YAKhE,CAAC;AAEF,eAAO,MAAM,gBAAgB,SAAU,IAAI,GAAG,MAAM;;;;;CAYnD,CAAC;AAEF,eAAO,MAAM,WAAW,uBAA0D,CAAC;AAEnF,eAAO,MAAM,OAAO,yBAQnB,CAAC","file":"date.d.ts","sourcesContent":["export type CompareDate = Date | number | { year: number; month: number; date: number };\n\nexport const getDateRect = (date: Date | number) => {\n  const _date = new Date(date);\n\n  return {\n    year: _date.getFullYear(),\n    month: _date.getMonth(),\n    date: _date.getDate(),\n    day: _date.getDay(),\n    time: _date.getTime(),\n  };\n};\n\nexport const isSameDate = (date1: CompareDate, date2: CompareDate) => {\n  if (date1 instanceof Date || typeof date1 === 'number') date1 = getDateRect(date1);\n  if (date2 instanceof Date || typeof date2 === 'number') date2 = getDateRect(date2);\n  const keys = ['year', 'month', 'date'];\n  return keys.every((key) => date1[key] === date2[key]);\n};\n\nexport const getMonthDateRect = (date: Date | number) => {\n  const { year, month } = getDateRect(date);\n  const firstDay = new Date(year, month, 1);\n  const weekdayOfFirstDay = firstDay.getDay();\n  const lastDate = new Date(+new Date(year, month + 1, 1) - 24 * 3600 * 1000).getDate();\n\n  return {\n    year,\n    month,\n    weekdayOfFirstDay,\n    lastDate,\n  };\n};\n\nexport const isValidDate = (val) => typeof val === 'number' || val instanceof Date;\n\nexport const getDate = (...args) => {\n  const now = new Date();\n  if (args.length === 0) return now;\n  if (args.length === 1 && args[0] <= 1000) {\n    const { year, month, date } = getDateRect(now);\n    return new Date(year, month + args[0], date);\n  }\n  return Date.apply(null, args);\n};\n"]}