{"version":3,"sources":["../../src/common/shared/calendar/index.ts"],"names":[],"mappings":"AAEA,OAAO,KAAK,EAAE,KAAK,EAAa,aAAa,EAAE,cAAc,EAAE,MAAM,QAAQ,CAAC;AAE9E,MAAM,CAAC,OAAO,OAAO,SAAS;IAC5B,cAAc,EAAE,MAAM,CAAC;IACvB,KAAK,EAAE,cAAc,GAAG,cAAc,EAAE,CAAC;IACzC,IAAI,EAAE,aAAa,CAAY;IAC/B,OAAO,EAAE,IAAI,CAAC;IACd,OAAO,EAAE,IAAI,CAAC;IACd,MAAM,EAAE,CAAC,GAAG,EAAE,KAAK,KAAK,KAAK,CAAC;gBAElB,OAAO,KAAA;IAOnB,YAAY;IAkBZ,OAAO;IAaP,SAAS;IA8DT,MAAM,CAAC,EAAE,QAAQ,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE;;;;;KAAA;CA2BvC","file":"index.d.ts","sourcesContent":["import { getDateRect, isSameDate, getMonthDateRect, isValidDate, getDate } from '../date';\n\nimport type { TDate, TDateType, TCalendarType, TCalendarValue } from './type';\n\nexport default class TCalendar {\n  firstDayOfWeek: number;\n  value: TCalendarValue | TCalendarValue[];\n  type: TCalendarType = 'single';\n  minDate: Date;\n  maxDate: Date;\n  format: (day: TDate) => TDate;\n\n  constructor(options) {\n    Object.assign(this, options);\n\n    if (!this.minDate) this.minDate = getDate();\n    if (!this.maxDate) this.maxDate = getDate(6);\n  }\n\n  getTrimValue() {\n    const { value, type } = this;\n    const format = (val) => {\n      if (val instanceof Date) return val;\n      if (typeof val === 'number') return new Date(val);\n      return new Date();\n    };\n    if (type === 'single' && isValidDate(value)) return format(value);\n\n    if (type === 'multiple' || type === 'range') {\n      if (Array.isArray(value)) {\n        const isValid = value.every((item) => isValidDate(item));\n        return isValid ? value.map((item) => format(item)) : [];\n      }\n      return [];\n    }\n  }\n\n  getDays() {\n    const raw = '日一二三四五六';\n    const ans = [];\n    let i = this.firstDayOfWeek % 7;\n\n    while (ans.length < 7) {\n      ans.push(raw[i]);\n      i = (i + 1) % 7;\n    }\n\n    return ans;\n  }\n\n  getMonths() {\n    const ans = [];\n    const selectedDate = this.getTrimValue();\n    const { minDate, maxDate, type, format } = this;\n    let { year: minYear, month: minMonth, time: minTime } = getDateRect(minDate);\n    const { year: maxYear, month: maxMonth, time: maxTime } = getDateRect(maxDate);\n    const calcType = (year: number, month: number, date: number): TDateType => {\n      const curDate = new Date(year, month, date, 23, 59, 59);\n\n      if (type === 'single' && selectedDate) {\n        if (isSameDate({ year, month, date }, selectedDate as Date)) return 'selected';\n      }\n      if (type === 'multiple' && selectedDate) {\n        const hit = (selectedDate as Date[]).some((item: Date) => isSameDate({ year, month, date }, item));\n        if (hit) {\n          return 'selected';\n        }\n      }\n      if (type === 'range' && selectedDate) {\n        if (Array.isArray(selectedDate)) {\n          const [startDate, endDate] = selectedDate;\n\n          if (startDate && isSameDate({ year, month, date }, startDate)) return 'start';\n          if (endDate && isSameDate({ year, month, date }, endDate)) return 'end';\n          if (startDate && endDate && curDate.getTime() > startDate.getTime() && curDate.getTime() < endDate.getTime())\n            return 'centre';\n        }\n      }\n\n      const minCurDate = new Date(year, month, date, 0, 0, 0);\n      if (curDate.getTime() < minTime || minCurDate.getTime() > maxTime) {\n        return 'disabled';\n      }\n      return '';\n    };\n\n    while (minYear < maxYear || (minYear === maxYear && minMonth <= maxMonth)) {\n      const target = getMonthDateRect(new Date(minYear, minMonth, 1));\n      const months: TDate[] = [];\n      for (let i = 1; i <= 31; i++) {\n        if (i > target.lastDate) break;\n        const dateObj: TDate = {\n          date: new Date(minYear, minMonth, i),\n          day: i,\n          type: calcType(minYear, minMonth, i),\n        };\n        months.push(format ? format(dateObj) : dateObj);\n      }\n      ans.push({\n        year: minYear,\n        month: minMonth,\n        months,\n        weekdayOfFirstDay: target.weekdayOfFirstDay,\n      });\n      const curDate = getDateRect(new Date(minYear, minMonth + 1, 1));\n      minYear = curDate.year;\n      minMonth = curDate.month;\n    }\n\n    return ans;\n  }\n\n  select({ cellType, year, month, date }) {\n    const { type } = this;\n    const selectedDate = this.getTrimValue();\n    if (cellType === 'disabled') return;\n    const selected = new Date(year, month, date);\n\n    this.value = selected;\n\n    if (type === 'range' && Array.isArray(selectedDate)) {\n      if (selectedDate.length === 1 && selected > selectedDate[0]) {\n        this.value = [selectedDate[0], selected];\n      } else {\n        this.value = [selected];\n      }\n    } else if (type === 'multiple' && Array.isArray(selectedDate)) {\n      const newVal = [...selectedDate];\n      const index = selectedDate.findIndex((item: Date) => isSameDate(item, selected));\n      if (index > -1) {\n        newVal.splice(index, 1);\n      } else {\n        newVal.push(selected);\n      }\n      this.value = newVal;\n    }\n\n    return this.value;\n  }\n}\n"]}