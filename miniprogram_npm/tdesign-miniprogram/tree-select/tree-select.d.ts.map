{"version":3,"sources":["../../src/tree-select/tree-select.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,cAAc,EAAe,MAAM,qBAAqB,CAAC;AAQlE,MAAM,CAAC,OAAO,OAAO,UAAW,SAAQ,cAAc;IACpD,eAAe,WAAuB;IAEtC,OAAO;;MAEL;IAEF,IAAI;;;;;MAKF;IAEF,UAAU,gFAAS;IAEnB,eAAe;;;QAKb;IAEF,SAAS;;;MAWP;IAEF,OAAO;;;;;MAgEL;CACH","file":"tree-select.d.ts","sourcesContent":["import { SuperComponent, wxComponent } from '../common/src/index';\nimport config from '../common/config';\nimport props from './props';\n\nconst { prefix } = config;\nconst name = `${prefix}-tree-select`;\n\n@wxComponent()\nexport default class TreeSelect extends SuperComponent {\n  externalClasses = [`${prefix}-class`];\n\n  options = {\n    multipleSlots: true,\n  };\n\n  data = {\n    prefix,\n    classPrefix: name,\n    labelAlias: 'label',\n    valueAlias: 'value',\n  };\n\n  properties = props;\n\n  controlledProps = [\n    {\n      key: 'value',\n      event: 'change',\n    },\n  ];\n\n  observers = {\n    value() {\n      this.buildTreeOptions();\n    },\n\n    keys(obj) {\n      this.setData({\n        labelAlias: obj.label || 'label',\n        valueAlias: obj.value || 'value',\n      });\n    },\n  };\n\n  methods = {\n    buildTreeOptions() {\n      const { options, value, multiple } = this.data;\n      const treeOptions = [];\n      let level = -1;\n      let node = { children: options };\n\n      while (node && node.children) {\n        level += 1;\n        const list = node.children;\n        const thisValue = value?.[level];\n\n        treeOptions.push([...list]);\n\n        if (thisValue == null) {\n          const [firstChild] = list;\n          node = firstChild;\n        } else {\n          const child = list.find((child) => child.value === thisValue);\n          node = child ?? list[0];\n        }\n      }\n\n      const leafLevel = Math.max(0, level);\n\n      if (multiple) {\n        const finalValue = this.data.value || this.data.defaultValue;\n        if (!Array.isArray(finalValue[leafLevel])) {\n          throw TypeError('应传入数组类型的 value');\n        }\n      }\n\n      this.setData({\n        leafLevel,\n        treeOptions,\n      });\n    },\n\n    onRootChange(e) {\n      const { value } = this.data;\n      const { value: itemValue } = e.detail;\n\n      value[0] = itemValue;\n\n      this._trigger('change', { value, level: 0 });\n    },\n\n    handleTreeClick(e) {\n      const { level, value: itemValue } = e.currentTarget.dataset;\n      const { value } = this.data;\n\n      value[level] = itemValue;\n      this._trigger('change', { value, level: 1 });\n    },\n\n    handleRadioChange(e) {\n      const { value } = this.data;\n      const { value: itemValue } = e.detail;\n      const { level } = e.target.dataset;\n\n      value[level] = itemValue;\n\n      this._trigger('change', { value, level });\n    },\n  };\n}\n"]}