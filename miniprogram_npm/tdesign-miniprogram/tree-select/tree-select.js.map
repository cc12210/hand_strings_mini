{"version":3,"sources":["../../src/tree-select/tree-select.ts"],"names":[],"mappings":"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","file":"tree-select.js","sourcesContent":["import { SuperComponent, wxComponent } from '../common/src/index';\nimport config from '../common/config';\nimport props from './props';\n\nconst { prefix } = config;\nconst name = `${prefix}-tree-select`;\n\n@wxComponent()\nexport default class TreeSelect extends SuperComponent {\n  externalClasses = [`${prefix}-class`];\n\n  options = {\n    multipleSlots: true,\n  };\n\n  data = {\n    prefix,\n    classPrefix: name,\n    labelAlias: 'label',\n    valueAlias: 'value',\n  };\n\n  properties = props;\n\n  controlledProps = [\n    {\n      key: 'value',\n      event: 'change',\n    },\n  ];\n\n  observers = {\n    value() {\n      this.buildTreeOptions();\n    },\n\n    keys(obj) {\n      this.setData({\n        labelAlias: obj.label || 'label',\n        valueAlias: obj.value || 'value',\n      });\n    },\n  };\n\n  methods = {\n    buildTreeOptions() {\n      const { options, value, multiple } = this.data;\n      const treeOptions = [];\n      let level = -1;\n      let node = { children: options };\n\n      while (node && node.children) {\n        level += 1;\n        const list = node.children;\n        const thisValue = value?.[level];\n\n        treeOptions.push([...list]);\n\n        if (thisValue == null) {\n          const [firstChild] = list;\n          node = firstChild;\n        } else {\n          const child = list.find((child) => child.value === thisValue);\n          node = child ?? list[0];\n        }\n      }\n\n      const leafLevel = Math.max(0, level);\n\n      if (multiple) {\n        const finalValue = this.data.value || this.data.defaultValue;\n        if (!Array.isArray(finalValue[leafLevel])) {\n          throw TypeError('应传入数组类型的 value');\n        }\n      }\n\n      this.setData({\n        leafLevel,\n        treeOptions,\n      });\n    },\n\n    onRootChange(e) {\n      const { value } = this.data;\n      const { value: itemValue } = e.detail;\n\n      value[0] = itemValue;\n\n      this._trigger('change', { value, level: 0 });\n    },\n\n    handleTreeClick(e) {\n      const { level, value: itemValue } = e.currentTarget.dataset;\n      const { value } = this.data;\n\n      value[level] = itemValue;\n      this._trigger('change', { value, level: 1 });\n    },\n\n    handleRadioChange(e) {\n      const { value } = this.data;\n      const { value: itemValue } = e.detail;\n      const { level } = e.target.dataset;\n\n      value[level] = itemValue;\n\n      this._trigger('change', { value, level });\n    },\n  };\n}\n"]}