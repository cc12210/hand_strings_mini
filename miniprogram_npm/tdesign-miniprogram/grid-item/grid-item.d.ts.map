{"version":3,"sources":["../../src/grid-item/grid-item.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,cAAc,EAAyB,gBAAgB,EAAE,MAAM,qBAAqB,CAAC;AAiB9F,MAAM,CAAC,OAAO,OAAO,QAAS,SAAQ,cAAc;IAClD,eAAe,WAMb;IAEF,OAAO;;MAGL;IAEF,SAAS,EAAE,gBAAgB,CAWzB;IAEF,UAAU,mCAAS;IAEnB,IAAI;;;;;;;;;MASF;IAEF,SAAS;;MAOP;IAEF,SAAS;;MAMP;IAEF,WAAW;IAsBX,aAAa;IAMb,eAAe;IAOf,cAAc;IAUd,OAAO,CAAC,CAAC,KAAA;IAMT,QAAQ;CAQT","file":"grid-item.d.ts","sourcesContent":["import { SuperComponent, wxComponent, isObject, RelationsOptions } from '../common/src/index';\nimport config from '../common/config';\nimport props from './props';\nimport { uniqueFactory, setIcon } from '../common/utils';\n\nconst { prefix } = config;\nconst name = `${prefix}-grid-item`;\nconst getUniqueID = uniqueFactory('grid_item');\n\nenum LinkTypes {\n  'redirect-to' = 'redirectTo',\n  'switch-tab' = 'switchTab',\n  'relaunch' = 'reLaunch',\n  'navigate-to' = 'navigateTo',\n}\n\n@wxComponent()\nexport default class GridItem extends SuperComponent {\n  externalClasses = [\n    `${prefix}-class`,\n    `${prefix}-class-content`,\n    `${prefix}-class-image`,\n    `${prefix}-class-text`,\n    `${prefix}-class-description`,\n  ];\n\n  options = {\n    multipleSlots: true,\n    // virtualHost: true,\n  };\n\n  relations: RelationsOptions = {\n    '../grid/grid': {\n      type: 'ancestor',\n      linked(target) {\n        this.parent = target;\n        this.updateStyle();\n        this.setData({\n          column: target.data.column,\n        });\n      },\n    },\n  };\n\n  properties = props;\n\n  data = {\n    prefix,\n    classPrefix: name,\n    gridItemStyle: '',\n    gridItemWrapperStyle: '',\n    gridItemContentStyle: '',\n    align: 'center',\n    column: 0,\n    labelID: '',\n  };\n\n  observers = {\n    icon(icon) {\n      const obj = setIcon('icon', icon, '');\n      this.setData({\n        ...obj,\n      });\n    },\n  };\n\n  lifetimes = {\n    ready() {\n      this.setData({\n        labelID: getUniqueID(),\n      });\n    },\n  };\n\n  updateStyle() {\n    const { hover, align } = this.parent.properties;\n    const gridItemStyles = [];\n    const gridItemWrapperStyles = [];\n    const gridItemContentStyles = [];\n    const widthStyle = this.getWidthStyle();\n    const paddingStyle = this.getPaddingStyle();\n    const borderStyle = this.getBorderStyle();\n    widthStyle && gridItemStyles.push(widthStyle);\n    paddingStyle && gridItemWrapperStyles.push(paddingStyle);\n    borderStyle && gridItemContentStyles.push(borderStyle);\n    this.setData({\n      gridItemStyle: `${gridItemStyles.join(';')}`,\n      gridItemWrapperStyle: gridItemWrapperStyles.join(';'),\n      gridItemContentStyle: gridItemContentStyles.join(';'),\n      hover,\n      layout: this.properties.layout,\n      align: align,\n    });\n  }\n\n  // 判断应该加在gridItem上的宽度\n  getWidthStyle() {\n    const { column } = this.parent.properties;\n    return column > 0 ? `width:${(1 / column) * 100}%` : '';\n  }\n\n  // 获取应该加在gridWrap上的padding\n  getPaddingStyle() {\n    const { gutter } = this.parent.properties;\n    if (gutter) return `padding-left:${gutter}rpx;padding-top:${gutter}rpx`;\n    return '';\n  }\n\n  // 判断border在grid-item-content上的css属性\n  getBorderStyle() {\n    const { gutter } = this.parent.properties;\n    let { border } = this.parent.properties;\n    if (!border) return ''; // 如果border的值没传或者是border的值为false\n    if (!isObject(border)) border = {} as any;\n    const { color = '#266FE8', width = 2, style = 'solid' } = border as any;\n    if (gutter) return `border:${width}rpx ${style} ${color}`;\n    return `border-top:${width}rpx ${style} ${color};border-left:${width}rpx ${style} ${color}`;\n  }\n\n  onClick(e) {\n    const { item } = e.currentTarget.dataset;\n    this.triggerEvent('click', item);\n    this.jumpLink();\n  }\n\n  jumpLink() {\n    const { url, jumpType } = this.properties;\n    if (url && jumpType) {\n      if (LinkTypes[jumpType as any]) {\n        wx[LinkTypes[jumpType as any]]({ url });\n      }\n    }\n  }\n}\n"]}