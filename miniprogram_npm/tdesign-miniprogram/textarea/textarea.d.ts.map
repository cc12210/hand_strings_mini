{"version":3,"sources":["../../src/textarea/textarea.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,cAAc,EAAe,MAAM,qBAAqB,CAAC;AASlE,MAAM,CAAC,OAAO,OAAO,QAAS,SAAQ,cAAc;IAClD,OAAO;;MAEL;IAEF,SAAS,WAAuB;IAEhC,eAAe,WAKb;IAEF,UAAU,mCAAS;IAEnB,IAAI;;;;MAIF;IAEF,SAAS;;MAIP;IAEF,SAAS;;MAKP;IAEF,OAAO;;;;;;;;;;;;;MAmEL;CACH","file":"textarea.d.ts","sourcesContent":["import { SuperComponent, wxComponent } from '../common/src/index';\nimport config from '../common/config';\nimport props from './props';\nimport { getCharacterLength } from '../common/utils';\n\nconst { prefix } = config;\nconst name = `${prefix}-textarea`;\n\n@wxComponent()\nexport default class Textarea extends SuperComponent {\n  options = {\n    multipleSlots: true,\n  };\n\n  behaviors = ['wx://form-field'];\n\n  externalClasses = [\n    `${prefix}-class`,\n    `${prefix}-class-textarea`,\n    `${prefix}-class-label`,\n    `${prefix}-class-indicator`,\n  ];\n\n  properties = props;\n\n  data = {\n    prefix,\n    classPrefix: name,\n    count: 0,\n  };\n\n  observers = {\n    value(val) {\n      this.updateCount(val);\n    },\n  };\n\n  lifetimes = {\n    ready() {\n      const { value } = this.properties;\n      this.updateValue(value);\n    },\n  };\n\n  methods = {\n    updateCount(val) {\n      const { maxcharacter, maxlength } = this.properties;\n      const { count } = this.calculateValue(val, maxcharacter, maxlength);\n      this.setData({\n        count,\n      });\n    },\n\n    updateValue(val) {\n      const { maxcharacter, maxlength } = this.properties;\n      const { value, count } = this.calculateValue(val, maxcharacter, maxlength);\n      this.setData({\n        value,\n        count,\n      });\n    },\n\n    calculateValue(value, maxcharacter, maxlength) {\n      if (maxcharacter > 0 && !Number.isNaN(maxcharacter)) {\n        const { length, characters } = getCharacterLength('maxcharacter', value, maxcharacter);\n        return {\n          value: characters,\n          count: length,\n        };\n      }\n      if (maxlength > 0 && !Number.isNaN(maxlength)) {\n        const { length, characters } = getCharacterLength('maxlength', value, maxlength);\n        return {\n          value: characters,\n          count: length,\n        };\n      }\n      return {\n        value,\n        count: value ? String(value).length : 0,\n      };\n    },\n\n    onInput(event) {\n      const { value } = event.detail;\n      this.updateValue(value);\n      this.triggerEvent('change', { value: this.data.value });\n    },\n    onFocus(event) {\n      this.triggerEvent('focus', {\n        ...event.detail,\n      });\n    },\n    onBlur(event) {\n      this.triggerEvent('blur', {\n        ...event.detail,\n      });\n    },\n    onConfirm(event) {\n      this.triggerEvent('enter', {\n        ...event.detail,\n      });\n    },\n    onLineChange(event) {\n      this.triggerEvent('lineChange', {\n        ...event.detail,\n      });\n    },\n    onKeyboardHeightChange(e) {\n      this.triggerEvent('keyboardheightchange', e.detail);\n    },\n  };\n}\n"]}