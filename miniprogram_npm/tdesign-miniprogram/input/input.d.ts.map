{"version":3,"sources":["../../src/input/input.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,cAAc,EAAe,MAAM,qBAAqB,CAAC;AASlE,MAAM,CAAC,OAAO,OAAO,KAAM,SAAQ,cAAc;IAC/C,OAAO;;MAEL;IAEF,eAAe,WAUb;IAEF,SAAS,WAAuB;IAEhC,UAAU,gCAAS;IAEnB,IAAI;;;;MAIF;IAEF,SAAS;;MAKP;IAEF,SAAS;;;;MAkBP;IAEF,OAAO;;;;;;;;;;MAiDL;CACH","file":"input.d.ts","sourcesContent":["import { SuperComponent, wxComponent } from '../common/src/index';\nimport config from '../common/config';\nimport props from './props';\nimport { getCharacterLength, calcIcon } from '../common/utils';\n\nconst { prefix } = config;\nconst name = `${prefix}-input`;\n\n@wxComponent()\nexport default class Input extends SuperComponent {\n  options = {\n    multipleSlots: true,\n  };\n\n  externalClasses = [\n    'class',\n    `${prefix}-class`,\n    `${prefix}-class-prefix-icon`,\n    `${prefix}-class-label`,\n    `${prefix}-class-input`,\n    `${prefix}-class-clearable`,\n    `${prefix}-class-suffix`,\n    `${prefix}-class-suffix-icon`,\n    `${prefix}-class-tips`,\n  ];\n\n  behaviors = ['wx://form-field'];\n\n  properties = props;\n\n  data = {\n    prefix,\n    classPrefix: name,\n    classBasePrefix: prefix,\n  };\n\n  lifetimes = {\n    ready() {\n      const { value } = this.properties;\n      this.updateValue(value);\n    },\n  };\n\n  observers = {\n    prefixIcon(v) {\n      this.setData({\n        _prefixIcon: calcIcon(v),\n      });\n    },\n\n    suffixIcon(v) {\n      this.setData({\n        _suffixIcon: calcIcon(v),\n      });\n    },\n\n    clearable(v) {\n      this.setData({\n        _clearIcon: calcIcon(v, 'close-circle-filled'),\n      });\n    },\n  };\n\n  methods = {\n    updateValue(value) {\n      const { maxcharacter, maxlength } = this.properties;\n      if (maxcharacter && maxcharacter > 0 && !Number.isNaN(maxcharacter)) {\n        const { length, characters } = getCharacterLength('maxcharacter', value, maxcharacter);\n        this.setData({\n          value: characters,\n          count: length,\n        });\n      } else if (maxlength > 0 && !Number.isNaN(maxlength)) {\n        const { length, characters } = getCharacterLength('maxlength', value, maxlength);\n        this.setData({\n          value: characters,\n          count: length,\n        });\n      } else {\n        this.setData({\n          value,\n          count: value ? String(value).length : 0,\n        });\n      }\n    },\n    onInput(e) {\n      const { value, cursor, keyCode } = e.detail;\n      this.updateValue(value);\n      this.triggerEvent('change', { value: this.data.value, cursor, keyCode });\n    },\n    onFocus(e) {\n      this.triggerEvent('focus', e.detail);\n    },\n    onBlur(e) {\n      this.triggerEvent('blur', e.detail);\n    },\n    onConfirm(e) {\n      this.triggerEvent('enter', e.detail);\n    },\n    onSuffixClick() {\n      this.triggerEvent('click', { trigger: 'suffix' });\n    },\n    onSuffixIconClick() {\n      this.triggerEvent('click', { trigger: 'suffix-icon' });\n    },\n    clearInput(e) {\n      this.triggerEvent('clear', e.detail);\n      this.setData({ value: '' });\n    },\n    onKeyboardHeightChange(e) {\n      this.triggerEvent('keyboardheightchange', e.detail);\n    },\n  };\n}\n"]}