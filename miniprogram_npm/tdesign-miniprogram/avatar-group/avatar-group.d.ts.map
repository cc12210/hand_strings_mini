{"version":3,"sources":["../../src/avatar-group/avatar-group.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,cAAc,EAAe,gBAAgB,EAAE,MAAM,qBAAqB,CAAC;AAQpF,MAAM,CAAC,OAAO,OAAO,WAAY,SAAQ,cAAc;IACrD,eAAe,WAA2E;IAE1F,UAAU,sCAAoB;IAE9B,IAAI;;;;;;MAMF;IAEF,OAAO;;MAEL;IAEF,SAAS,EAAE,gBAAgB,CAIzB;IAEF,SAAS;;;MAWP;IAEF,SAAS;;MAIP;IAEF,OAAO;;;;MAmCL;CACH","file":"avatar-group.d.ts","sourcesContent":["import { SuperComponent, wxComponent, RelationsOptions } from '../common/src/index';\nimport config from '../common/config';\nimport avatarGroupProps from './props';\n\nconst { prefix } = config;\nconst name = `${prefix}-avatar-group`;\n\n@wxComponent()\nexport default class AvatarGroup extends SuperComponent {\n  externalClasses = [`${prefix}-class`, `${prefix}-class-content`, `${prefix}-class-image`];\n\n  properties = avatarGroupProps;\n\n  data = {\n    prefix,\n    classPrefix: name,\n    hasChild: true,\n    length: 0,\n    className: '',\n  };\n\n  options = {\n    multipleSlots: true,\n  };\n\n  relations: RelationsOptions = {\n    '../avatar/avatar': {\n      type: 'descendant',\n    },\n  };\n\n  lifetimes = {\n    attached() {\n      this.setClass();\n    },\n    ready() {\n      this.setData({\n        length: this.$children.length,\n      });\n      this.handleMax();\n      this.handleChildCascading();\n    },\n  };\n\n  observers = {\n    'cascading, size'() {\n      this.setClass();\n    },\n  };\n\n  methods = {\n    setClass() {\n      const { cascading, size } = this.properties;\n      const direction = cascading.split('-')[0];\n      const classList = [\n        name,\n        `${prefix}-class`,\n        `${name}-offset-${direction}-${size.indexOf('px') > -1 ? 'medium' : size}`,\n      ];\n\n      this.setData({\n        className: classList.join(' '),\n      });\n    },\n\n    handleMax() {\n      const { max } = this.data;\n      const len = this.$children.length;\n      if (!max || max > len) return;\n\n      const restAvatars = this.$children.splice(max, len - max);\n\n      restAvatars.forEach((child) => {\n        child.hide();\n      });\n    },\n\n    handleChildCascading() {\n      if (this.properties.cascading === 'right-up') return;\n\n      const defaultZIndex = 100;\n      this.$children.forEach((child, index) => {\n        child.updateCascading(defaultZIndex - index * 10);\n      });\n    },\n  };\n}\n"]}