{"version":3,"sources":["../../src/swiper/swiper.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,cAAc,EAAe,gBAAgB,EAAE,MAAM,qBAAqB,CAAC;AAQpF,MAAM,CAAC,OAAO,OAAO,MAAO,SAAQ,cAAc;IAChD,eAAe,WAMb;IAEF,OAAO;;MAEL;IAEF,UAAU,iCAAS;IAEnB,SAAS;;MAIP;IAEF,IAAI,MAAQ;IAEZ,SAAS,EAAE,gBAAgB,CAIzB;IAEF,IAAI;;;MAGF;IAEF,SAAS;;MAKP;IAEF,OAAO;;;;;;MAuDL;CACH","file":"swiper.d.ts","sourcesContent":["import { SuperComponent, wxComponent, RelationsOptions } from '../common/src/index';\nimport config from '../common/config';\nimport props from './props';\n\nconst { prefix } = config;\nconst name = `${prefix}-swiper`;\n\n@wxComponent()\nexport default class Swiper extends SuperComponent {\n  externalClasses = [\n    `${prefix}-class`,\n    `${prefix}-class-nav`,\n    `${prefix}-class-image`,\n    `${prefix}-class-prev-image`,\n    `${prefix}-class-next-image`,\n  ];\n\n  options = {\n    multipleSlots: true,\n  };\n\n  properties = props;\n\n  observers = {\n    navCurrent(v) {\n      this.updateNav(v);\n    },\n  };\n\n  $nav = null;\n\n  relations: RelationsOptions = {\n    '../swiper-nav/swiper-nav': {\n      type: 'child',\n    },\n  };\n\n  data = {\n    prefix,\n    classPrefix: name,\n  };\n\n  lifetimes = {\n    ready() {\n      const { current } = this.properties;\n      this.setData({ navCurrent: current });\n    },\n  };\n\n  methods = {\n    updateNav(currentValue) {\n      if (this.data.navigation) return;\n      const $nav = this.getRelationNodes('./swiper-nav')?.[0];\n      if (!$nav) return;\n      const { direction, paginationPosition, list } = this.properties;\n\n      $nav.setData({\n        current: currentValue,\n        total: list.length,\n        direction,\n        paginationPosition,\n      });\n    },\n\n    onTap(e) {\n      const { index } = e.currentTarget.dataset;\n\n      this.triggerEvent('click', { index });\n    },\n\n    onChange(e) {\n      const { current, source } = e.detail;\n\n      this.setData({\n        navCurrent: current,\n      });\n\n      this.triggerEvent('change', { current, source });\n    },\n\n    onNavBtnChange(e) {\n      const { dir, source } = e.detail;\n\n      this.doNavBtnChange(dir, source);\n    },\n\n    doNavBtnChange(dir, source) {\n      const { current, list, loop } = this.data;\n      const count = list.length;\n      let nextPos = dir === 'next' ? current + 1 : current - 1;\n\n      if (loop) {\n        nextPos = dir === 'next' ? (current + 1) % count : (current - 1 + count) % count;\n      } else {\n        nextPos = nextPos < 0 || nextPos >= count ? current : nextPos;\n      }\n\n      if (nextPos === current) return;\n\n      this.setData({\n        current: nextPos,\n      });\n      this.triggerEvent('change', { current: nextPos, source });\n    },\n  };\n}\n"]}