{"version":3,"sources":["../../src/pull-down-refresh/pull-down-refresh.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,cAAc,EAAe,gBAAgB,EAAE,MAAM,qBAAqB,CAAC;AAQpF,MAAM,CAAC,OAAO,OAAO,eAAgB,SAAQ,cAAc;IACzD,UAAU,SAAK;IAEf,UAAU,EAAE;QAAE,KAAK,EAAE,MAAM,CAAC;QAAC,KAAK,EAAE,MAAM,CAAA;KAAE,GAAG,IAAI,CAAQ;IAE3D,SAAS,UAAS;IAElB,YAAY,EAAE,MAAM,CAAK;IAIzB,gBAAgB,SAAO;IAEvB,wCAAwC;IACxC,yBAAyB,SAAK;IAE9B,yBAAyB;IACzB,sBAAsB,SAAK;IAE3B,eAAe,WAAsG;IAErH,OAAO;;MAEL;IAEF,SAAS,EAAE,gBAAgB,CAIzB;IAEF,UAAU,0CAAS;IAEnB,IAAI;;;;;;;;MAQF;IAEF,SAAS;;;MAuBP;IAEF,SAAS;;;;MAiBP;IAEF,OAAO;;;;wBAiBW,2BAA2B,CAAC,eAAe;uBAW5C,2BAA2B,CAAC,eAAe;sBAsB5C,2BAA2B,CAAC,eAAe;iBAkChD,MAAM,GAAG,MAAM,GAAG,MAAM;gBAKzB,MAAM;uCAIiB,MAAM;;gCAwBb,MAAM;;MAO9B;CACH","file":"pull-down-refresh.d.ts","sourcesContent":["import { SuperComponent, wxComponent, RelationsOptions } from '../common/src/index';\nimport config from '../common/config';\nimport props from './props';\n\nconst { prefix } = config;\nconst name = `${prefix}-pull-down-refresh`;\n\n@wxComponent()\nexport default class PullDownRefresh extends SuperComponent {\n  pixelRatio = 1; // 像素比(rpx与px在此设备上的比值)\n\n  startPoint: { pageX: number; pageY: number } | null = null; // 下拉开始的起点，主要用于计算下拉高度\n\n  isPulling = false; // 是否下拉中\n\n  maxBarHeight: number = 0; // 最大下拉高度，单位 rpx\n\n  // 触发刷新的下拉高度，单位rpx\n  // 松开时下拉高度大于这个值即会触发刷新，触发刷新后松开，会恢复到这个高度并保持，直到刷新结束\n  loadingBarHeight = 200;\n\n  /** 开始刷新 - 刷新成功/失败 最大间隔时间setTimeout句柄 */\n  maxRefreshAnimateTimeFlag = 0;\n\n  /** 关闭动画耗时setTimeout句柄 */\n  closingAnimateTimeFlag = 0;\n\n  externalClasses = [`${prefix}-class`, `${prefix}-class-loading`, `${prefix}-class-tex`, `${prefix}-class-indicator`];\n\n  options = {\n    multipleSlots: true,\n  };\n\n  relations: RelationsOptions = {\n    '../back-top/back-top': {\n      type: 'descendant',\n    },\n  };\n\n  properties = props;\n\n  data = {\n    prefix,\n    classPrefix: name,\n    barHeight: 0,\n    refreshStatus: -1,\n    loosing: false,\n    enableToRefresh: true,\n    scrollTop: 0,\n  };\n\n  lifetimes = {\n    attached() {\n      const { screenWidth } = wx.getSystemInfoSync();\n      const { maxBarHeight, loadingBarHeight } = this.properties;\n\n      this.pixelRatio = 750 / screenWidth;\n\n      if (maxBarHeight) {\n        this.maxBarHeight = this.toRpx(maxBarHeight);\n      }\n\n      if (loadingBarHeight) {\n        this.setData({\n          computedLoadingBarHeight: this.toRpx(loadingBarHeight),\n        });\n        this.loadingBarHeight = this.toRpx(loadingBarHeight);\n      }\n    },\n\n    detached() {\n      clearTimeout(this.maxRefreshAnimateTimeFlag);\n      clearTimeout(this.closingAnimateTimeFlag);\n    },\n  };\n\n  observers = {\n    value(val) {\n      if (!val) {\n        clearTimeout(this.maxRefreshAnimateTimeFlag);\n        this.setData({ refreshStatus: 3 });\n        this.close();\n      }\n    },\n    maxBarHeight(val) {\n      this.maxBarHeight = this.toRpx(val);\n    },\n    loadingBarHeight(val) {\n      this.setData({\n        computedLoadingBarHeight: this.toRpx(val),\n      });\n      this.loadingBarHeight = this.toRpx(val);\n    },\n  };\n\n  methods = {\n    onScrollToBottom() {\n      this.triggerEvent('scrolltolower');\n    },\n    onScrollToTop() {\n      this.setData({\n        enableToRefresh: true,\n      });\n    },\n    onScroll(e) {\n      const { scrollTop } = e.detail;\n\n      this.setData({\n        enableToRefresh: scrollTop === 0,\n      });\n      this.triggerEvent('scroll', { scrollTop });\n    },\n    onTouchStart(e: WechatMiniprogram.Component.TrivialInstance) {\n      if (this.isPulling || !this.data.enableToRefresh) return;\n      const { touches } = e;\n      if (touches.length !== 1) return;\n      const { pageX, pageY } = touches[0];\n\n      this.setData({ loosing: false });\n      this.startPoint = { pageX, pageY };\n      this.isPulling = true;\n    },\n\n    onTouchMove(e: WechatMiniprogram.Component.TrivialInstance) {\n      if (!this.startPoint) return;\n\n      const { touches } = e;\n\n      if (touches.length !== 1) return;\n\n      const { pageY } = touches[0];\n      const offset = pageY - this.startPoint.pageY;\n      const barHeight = this.toRpx(offset);\n\n      if (barHeight > 0) {\n        if (barHeight > this.maxBarHeight) {\n          // 限高\n          this.setRefreshBarHeight(this.maxBarHeight);\n          // this.startPoint.pageY = pageY - this.toPx(this.maxBarHeight); // 限高的同时修正起点，避免触摸点上移时无效果\n        } else {\n          this.setRefreshBarHeight(barHeight);\n        }\n      }\n    },\n\n    onTouchEnd(e: WechatMiniprogram.Component.TrivialInstance) {\n      if (!this.startPoint) return;\n      const { changedTouches } = e;\n      if (changedTouches.length !== 1) return;\n      const { pageY } = changedTouches[0];\n\n      const barHeight = this.toRpx(pageY - this.startPoint.pageY);\n      this.startPoint = null; // 清掉起点，之后将忽略touchMove、touchEnd事件\n\n      this.setData({ loosing: true });\n\n      // 松开时高度超过阈值则触发刷新\n      if (barHeight > this.loadingBarHeight) {\n        this.setData({\n          barHeight: this.loadingBarHeight,\n          refreshStatus: 2,\n        });\n\n        this.triggerEvent('change', { value: true });\n        this.triggerEvent('refresh');\n        this.maxRefreshAnimateTimeFlag = setTimeout(() => {\n          this.maxRefreshAnimateTimeFlag = null;\n\n          if (this.data.refreshStatus === 2) {\n            // 超时回调\n            this.triggerEvent('timeout');\n            this.close(); // 超时仍未被回调，则直接结束下拉\n          }\n        }, this.properties.refreshTimeout as any) as any as number;\n      } else {\n        this.close();\n      }\n    },\n\n    toRpx(v: number | string): number {\n      if (typeof v === 'number') return v * this.pixelRatio;\n      return parseInt(v, 10);\n    },\n\n    toPx(v: number) {\n      return v / this.pixelRatio;\n    },\n\n    setRefreshBarHeight(barHeight: number) {\n      const data: Record<string, any> = { barHeight };\n      if (barHeight >= this.loadingBarHeight) {\n        data.refreshStatus = 1;\n      } else {\n        data.refreshStatus = 0;\n      }\n      return new Promise((resolve) => {\n        this.setData(data, () => resolve(barHeight));\n      });\n    },\n\n    close() {\n      const animationDuration = 240;\n\n      this.setData({ barHeight: 0 });\n      this.triggerEvent('change', { value: false });\n      this.closingAnimateTimeFlag = setTimeout(() => {\n        this.closingAnimateTimeFlag = null;\n        this.setData({ refreshStatus: -1 });\n        this.isPulling = false; // 退出下拉状态\n      }, animationDuration) as any as number;\n    },\n\n    setScrollTop(scrollTop: number) {\n      this.setData({ scrollTop });\n    },\n\n    scrollToTop() {\n      this.setScrollTop(0);\n    },\n  };\n}\n"]}