{"version":3,"sources":["../../src/message/index.ts"],"names":[],"mappings":";;;;;;;;;;;AAAA,OAAO,EAAE,WAAW,EAAgB,MAAM,qBAAqB,CAAC;AAChE,OAAO,EAAE,WAAW,EAAE,MAAM,iBAAiB,CAAC;AAS9C,MAAM,WAAW,GAAG,UAAU,OAAiC,EAAE,QAAqB,WAAW,CAAC,IAAI;IACpG,MAAM,EAAE,OAAO,EAAE,QAAQ,GAAG,YAAY,KAAsB,OAAO,EAAxB,YAAY,UAAK,OAAO,EAA/D,uBAAqD,CAAU,CAAC;IACtE,MAAM,QAAQ,GAAG,WAAW,CAAC,OAAO,EAAE,QAAQ,CAAC,CAAC;IAEhD,IAAI,QAAQ,EAAE;QACZ,QAAQ,CAAC,SAAS,CAAC,GAAG,EAAE;YACtB,QAAQ,CAAC,OAAO,iBAAG,KAAK,IAAK,YAAY,GAAI,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;QAC7E,CAAC,CAAC,CAAC;QAEH,OAAO,QAAQ,CAAC;KACjB;IACD,OAAO,CAAC,KAAK,CAAC,oCAAoC,CAAC,CAAC;AACtD,CAAC,CAAC;AAEF,eAAe;IACb,IAAI,CAAC,OAAiC;QACpC,OAAO,WAAW,CAAC,OAAO,EAAE,WAAW,CAAC,IAAI,CAAC,CAAC;IAChD,CAAC;IACD,OAAO,CAAC,OAAiC;QACvC,OAAO,WAAW,CAAC,OAAO,EAAE,WAAW,CAAC,OAAO,CAAC,CAAC;IACnD,CAAC;IACD,OAAO,CAAC,OAAiC;QACvC,OAAO,WAAW,CAAC,OAAO,EAAE,WAAW,CAAC,OAAO,CAAC,CAAC;IACnD,CAAC;IACD,KAAK,CAAC,OAAiC;QACrC,OAAO,WAAW,CAAC,OAAO,EAAE,WAAW,CAAC,KAAK,CAAC,CAAC;IACjD,CAAC;IACD,IAAI,CAAC,OAAiC;QACpC,MAAM,EAAE,OAAO,EAAE,QAAQ,GAAG,YAAY,EAAE,qBAAQ,OAAO,CAAE,CAAC;QAC5D,MAAM,QAAQ,GAAG,WAAW,CAAC,OAAO,EAAE,QAAQ,CAAC,CAAC;QAChD,IAAI,CAAC,QAAQ,EAAE;YACb,OAAO;SACR;QACD,QAAQ,CAAC,IAAI,EAAE,CAAC;IAClB,CAAC;CACF,CAAC","file":"index.js","sourcesContent":["import { MessageType, MessageProps } from './message.interface';\nimport { getInstance } from '../common/utils';\n\ntype Context = WechatMiniprogram.Page.TrivialInstance | WechatMiniprogram.Component.TrivialInstance;\n\ninterface MessageActionOptionsType extends Optional<MessageProps> {\n  context?: Context;\n  selector?: string;\n}\n\nconst showMessage = function (options: MessageActionOptionsType, theme: MessageType = MessageType.info) {\n  const { context, selector = '#t-message', ...otherOptions } = options;\n  const instance = getInstance(context, selector);\n\n  if (instance) {\n    instance.resetData(() => {\n      instance.setData({ theme, ...otherOptions }, instance.show.bind(instance));\n    });\n\n    return instance;\n  }\n  console.error('未找到组件,请确认 selector && context 是否正确');\n};\n\nexport default {\n  info(options: MessageActionOptionsType) {\n    return showMessage(options, MessageType.info);\n  },\n  success(options: MessageActionOptionsType) {\n    return showMessage(options, MessageType.success);\n  },\n  warning(options: MessageActionOptionsType) {\n    return showMessage(options, MessageType.warning);\n  },\n  error(options: MessageActionOptionsType) {\n    return showMessage(options, MessageType.error);\n  },\n  hide(options: MessageActionOptionsType) {\n    const { context, selector = '#t-message' } = { ...options };\n    const instance = getInstance(context, selector);\n    if (!instance) {\n      return;\n    }\n    instance.hide();\n  },\n};\n"]}