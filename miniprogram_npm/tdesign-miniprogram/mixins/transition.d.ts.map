{"version":3,"sources":["../../src/mixins/transition.ts"],"names":[],"mappings":"AAIA,MAAM,CAAC,OAAO,UAAU,UAAU,WA2HjC","file":"transition.d.ts","sourcesContent":["import config from '../common/config';\n\nconst { prefix } = config;\n\nexport default function transition() {\n  return Behavior({\n    properties: {\n      visible: {\n        type: Boolean,\n        value: null,\n        observer: 'watchVisible',\n      },\n      appear: Boolean,\n      name: {\n        type: String,\n        value: 'fade',\n      },\n      durations: {\n        type: Number,\n        optionalTypes: [Array],\n      },\n    },\n\n    data: {\n      transitionClass: '',\n      transitionDurations: 300,\n      className: '',\n      realVisible: false,\n    },\n\n    created() {\n      this.status = '';\n      this.transitionT = 0;\n    },\n    attached() {\n      this.durations = this.getDurations();\n      if (this.data.visible) {\n        this.enter();\n      }\n      this.inited = true;\n    },\n    detached() {\n      clearTimeout(this.transitionT);\n    },\n\n    methods: {\n      watchVisible(curr, prev) {\n        if (this.inited && curr !== prev) {\n          curr ? this.enter() : this.leave();\n        }\n      },\n      getDurations() {\n        const { durations } = this.data;\n        if (Array.isArray(durations)) {\n          return durations.map((item) => Number(item));\n        }\n        return [Number(durations), Number(durations)];\n      },\n      enter() {\n        const { name } = this.data;\n        const [duration] = this.durations;\n        this.status = 'entering';\n        this.setData({\n          realVisible: true,\n          transitionClass: `${prefix}-${name}-enter ${prefix}-${name}-enter-active`,\n        });\n        setTimeout(() => {\n          this.setData({\n            transitionClass: `${prefix}-${name}-enter-active ${prefix}-${name}-enter-to`,\n          });\n        }, 30);\n        if (typeof duration === 'number' && duration > 0) {\n          this.transitionT = setTimeout(this.entered.bind(this), duration + 30);\n        }\n      },\n      entered() {\n        this.customDuration = false;\n        clearTimeout(this.transitionT);\n        this.status = 'entered';\n        this.setData({\n          transitionClass: '',\n        });\n      },\n      leave() {\n        const { name } = this.data;\n        const [, duration] = this.durations;\n        this.status = 'leaving';\n        this.setData({\n          transitionClass: `${prefix}-${name}-leave  ${prefix}-${name}-leave-active`,\n        });\n        clearTimeout(this.transitionT);\n        setTimeout(() => {\n          this.setData({\n            transitionClass: `${prefix}-${name}-leave-active ${prefix}-${name}-leave-to`,\n          });\n        }, 30);\n        if (typeof duration === 'number' && duration > 0) {\n          this.customDuration = true;\n          this.transitionT = setTimeout(this.leaved.bind(this), duration + 30);\n        }\n      },\n      leaved() {\n        this.customDuration = false;\n        this.triggerEvent('leaved');\n        clearTimeout(this.transitionT);\n        this.status = 'leaved';\n        this.setData({\n          transitionClass: '',\n        });\n      },\n      onTransitionEnd() {\n        if (this.customDuration) {\n          return;\n        }\n\n        clearTimeout(this.transitionT);\n        if (this.status === 'entering' && this.data.visible) {\n          this.entered();\n        } else if (this.status === 'leaving' && !this.data.visible) {\n          this.leaved();\n          this.setData({\n            realVisible: false,\n          });\n        }\n      },\n    },\n  });\n}\n"]}