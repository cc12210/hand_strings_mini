{"version":3,"sources":["../../src/slider/slider.ts"],"names":[],"mappings":";AAAA,OAAO,EAAE,cAAc,EAAe,MAAM,qBAAqB,CAAC;AAIlE,OAAO,KAAK,EAAE,WAAW,EAAE,MAAM,QAAQ,CAAC;AAO1C,aAAK,QAAQ,GAAG;IACd,YAAY,EAAE,MAAM,CAAC;IACrB,WAAW,EAAE,MAAM,CAAC;IACpB,WAAW,EAAE,MAAM,GAAG,IAAI,CAAC;IAC3B,YAAY,EAAE,MAAM,GAAG,IAAI,CAAC;IAC5B,UAAU,EAAE,MAAM,CAAC;IACnB,WAAW,EAAE,MAAM,CAAC;IACpB,QAAQ,EAAE,MAAM,CAAC;IACjB,QAAQ,EAAE,MAAM,CAAC;IACjB,SAAS,EAAE,MAAM,CAAC;IAClB,WAAW,EAAE,MAAM,EAAE,CAAC;IACtB,SAAS,EAAE,MAAM,CAAC;IAClB,OAAO,EAAE,OAAO,CAAC;IACjB,UAAU,EAAE,GAAG,EAAE,CAAC;IAClB,cAAc,EAAE,GAAG,EAAE,CAAC;IACtB,MAAM,EAAE,WAAW,CAAC;IACpB,MAAM,EAAE,MAAM,CAAC;CAChB,CAAC;AAOF,MAAM,CAAC,OAAO,OAAO,MAAO,SAAQ,cAAc;IAChD,eAAe,WAOb;IAEF,UAAU,iCAAS;IAEnB,eAAe;;;QAKb;IAGF,IAAI,EAAE,QAAQ,CAkBZ;IAEF,SAAS;wBACS,WAAW;yBAGV,WAAW;;MAoB5B;IAEF,SAAS;;;MASP;IAEF,YAAY,CAAC,KAAK,CAAC,EAAE,WAAW;IAMhC,iBAAiB,CAAC,QAAQ,EAAE,WAAW;IAkBvC,UAAU,CAAC,KAAK,EAAE,GAAG;IA+BrB,iBAAiB,CAAC,KAAK,EAAE,MAAM;IAYzB,eAAe;IAuBrB,SAAS,CAAC,KAAK,EAAE,MAAM,GAAG,MAAM;IAWhC,eAAe,CAAC,CAAC,EAAE,iBAAiB,CAAC,UAAU;IAQ/C,oBAAoB,CAAC,CAAC,EAAE,iBAAiB,CAAC,UAAU;IAkBpD;;;;;;;OAOG;IACH,iBAAiB,CAAC,QAAQ,EAAE,MAAM,EAAE,GAAG,EAAE,CAAC,GAAG,CAAC,GAAG,MAAM;IASvD,SAAS,CAAC,CAAC,EAAE,iBAAiB,CAAC,UAAU;IAiCzC,eAAe,CAAC,CAAC,EAAE,iBAAiB,CAAC,UAAU;IAiB/C,gBAAgB,CAAC,CAAC,EAAE,iBAAiB,CAAC,UAAU;IAiBhD,YAAY,CAAC,IAAI,EAAE,MAAM,EAAE,KAAK,EAAE,MAAM;CAuBzC","file":"slider.d.ts","sourcesContent":["import { SuperComponent, wxComponent } from '../common/src/index';\nimport config from '../common/config';\nimport { trimSingleValue, trimValue } from './tool';\nimport props from './props';\nimport type { SliderValue } from './type';\nimport { getRect } from '../common/utils';\nimport Bus from '../common/bus';\n\nconst { prefix } = config;\nconst name = `${prefix}-slider`;\n\ntype dataType = {\n  sliderStyles: string;\n  classPrefix: string;\n  initialLeft: number | null;\n  initialRight: number | null;\n  activeLeft: number;\n  activeRight: number;\n  maxRange: number;\n  lineLeft: number;\n  lineRight: number;\n  dotTopValue: number[];\n  blockSize: number;\n  isScale: boolean;\n  scaleArray: any[];\n  scaleTextArray: any[];\n  _value: SliderValue;\n  prefix: string;\n};\n\ninterface boundingClientRect {\n  left: number;\n  right: number;\n}\n@wxComponent()\nexport default class Slider extends SuperComponent {\n  externalClasses = [\n    'class',\n    `${prefix}-class`,\n    `${prefix}-class-bar`,\n    `${prefix}-class-bar-active`,\n    `${prefix}-class-bar-disabled`,\n    `${prefix}-class-cursor`,\n  ];\n\n  properties = props;\n\n  controlledProps = [\n    {\n      key: 'value',\n      event: 'change',\n    },\n  ];\n\n  // 组件的内部数据\n  data: dataType = {\n    // 按钮样式列表\n    sliderStyles: '',\n    classPrefix: name,\n    initialLeft: null,\n    initialRight: null,\n    activeLeft: 0,\n    activeRight: 0,\n    maxRange: 0,\n    lineLeft: 0,\n    lineRight: 0,\n    dotTopValue: [0, 0],\n    _value: 0,\n    blockSize: 20,\n    isScale: false,\n    scaleArray: [],\n    scaleTextArray: [],\n    prefix,\n  };\n\n  observers = {\n    value(newValue: SliderValue) {\n      this.handlePropsChange(newValue);\n    },\n    _value(newValue: SliderValue) {\n      const { min, max, range } = this.properties;\n      const { maxRange } = this.data;\n\n      if (range) {\n        const left = (maxRange * (newValue[0] - Number(min))) / (Number(max) - Number(min));\n        const right = (maxRange * (Number(max) - newValue[1])) / (Number(max) - Number(min));\n        // 因为要计算点相对于线的绝对定位，所以要取整条线的长度而非可滑动的范围\n        this.setLineStyle(left, right);\n      } else {\n        this.setSingleBarWidth(newValue as number);\n      }\n    },\n    marks(val) {\n      if (this.data.initialLeft != null) {\n        this.handleMask(val);\n      } else {\n        this.bus.on('initial', () => this.handleMask(val));\n      }\n    },\n  };\n\n  lifetimes = {\n    created() {\n      this.bus = new Bus();\n    },\n    attached() {\n      const { value } = this.properties;\n      if (!value) this.handlePropsChange(0);\n      this.getInitialStyle();\n    },\n  };\n\n  triggerValue(value?: SliderValue) {\n    this._trigger('change', {\n      value: trimValue(value, this.properties),\n    });\n  }\n\n  handlePropsChange(newValue: SliderValue) {\n    const value = trimValue(newValue, this.properties);\n\n    const setValueAndTrigger = () => {\n      this.setData({\n        _value: value,\n      });\n    };\n\n    // 基本样式未初始化，等待初始化后在改变数据。\n    if (this.data.maxRange === 0) {\n      this.getInitialStyle().then(setValueAndTrigger);\n      return;\n    }\n\n    setValueAndTrigger();\n  }\n\n  handleMask(marks: any) {\n    const calcPos = (arr: number[]) => {\n      const { theme } = this.properties;\n      const { blockSize, maxRange } = this.data;\n      const margin = (theme as any) === 'capsule' ? blockSize / 2 : 0;\n\n      return arr.map((item) => ({\n        val: item,\n        left: Math.round((item / 100) * maxRange) + margin,\n      }));\n    };\n    if (marks?.length && Array.isArray(marks)) {\n      this.setData({\n        isScale: true,\n        scaleArray: calcPos(marks),\n        scaleTextArray: [],\n      });\n    }\n\n    if (Object.prototype.toString.call(marks) === '[object Object]') {\n      const scaleArray = Object.keys(marks).map((item) => Number(item));\n      const scaleTextArray = scaleArray.map((item) => marks[item]);\n\n      this.setData({\n        isScale: scaleArray.length > 0,\n        scaleArray: calcPos(scaleArray),\n        scaleTextArray,\n      });\n    }\n  }\n\n  setSingleBarWidth(value: number) {\n    const { max, min, theme } = this.properties;\n    const { maxRange, blockSize } = this.data;\n    const halfBlock = (theme as any) === 'capsule' ? Number(blockSize) / 2 : 0;\n    const percentage = (Number(value) - Number(min)) / (Number(max) - Number(min));\n    const width = percentage * maxRange + halfBlock;\n\n    this.setData({\n      lineBarWidth: `${width}px`,\n    });\n  }\n\n  async getInitialStyle() {\n    const line: boundingClientRect = await getRect(this, '#sliderLine');\n    const { blockSize } = this.data;\n    const { theme } = this.properties;\n    const halfBlock = Number(blockSize) / 2;\n    let maxRange = line.right - line.left;\n    let initialLeft = line.left;\n    let initialRight = line.right;\n\n    if ((theme as any) === 'capsule') {\n      maxRange = maxRange - Number(blockSize) - 6; // 6 是边框宽度\n      initialLeft -= halfBlock;\n      initialRight -= halfBlock;\n    }\n\n    this.setData({\n      maxRange,\n      initialLeft,\n      initialRight,\n    });\n    this.bus.emit('initial');\n  }\n\n  stepValue(value: number): number {\n    const { step, min, max } = this.properties;\n\n    if (Number(step) < 1 || Number(step) > Number(max) - Number(min)) return value;\n\n    const closestStep = trimSingleValue(Math.round(value / Number(step)) * Number(step), Number(min), Number(max));\n\n    return closestStep as number;\n  }\n\n  // 点击滑动条的事件\n  onSingleLineTap(e: WechatMiniprogram.TouchEvent) {\n    const { disabled } = this.properties;\n    if (disabled) return;\n\n    const value = this.getSingleChangeValue(e);\n    this.triggerValue(value);\n  }\n\n  getSingleChangeValue(e: WechatMiniprogram.TouchEvent) {\n    const { min, max } = this.properties;\n    const { initialLeft, maxRange } = this.data;\n    const [touch] = e.changedTouches;\n    const { pageX } = touch;\n    const currentLeft = pageX - initialLeft;\n    let value = 0;\n\n    if (currentLeft <= 0) {\n      value = Number(min);\n    } else if (currentLeft >= maxRange) {\n      value = Number(max);\n    } else {\n      value = Math.round((currentLeft / maxRange) * (Number(max) - Number(min)) + Number(min));\n    }\n    return this.stepValue(value);\n  }\n\n  /**\n   * 将位置转换为值\n   *\n   * @param {number} posValue 位置数据\n   * @param {(0 | 1)} dir 方向： 0-left， 1-right\n   * @return  {number}\n   * @memberof Slider\n   */\n  convertPosToValue(posValue: number, dir: 0 | 1): number {\n    const { maxRange } = this.data;\n    const { max, min } = this.properties;\n    return dir === 0\n      ? (posValue / maxRange) * (Number(max) - Number(min)) + Number(min)\n      : Number(max) - (posValue / maxRange) * (Number(max) - Number(min));\n  }\n\n  // 点击范围选择滑动条的事件\n  onLineTap(e: WechatMiniprogram.TouchEvent) {\n    const { disabled, theme } = this.properties;\n    const { initialLeft, initialRight, maxRange, blockSize } = this.data;\n    if (disabled) return;\n\n    const [touch] = e.changedTouches;\n    const { pageX } = touch;\n    const halfBlock = (theme as any) === 'capsule' ? Number(blockSize) / 2 : 0;\n\n    const currentLeft = pageX - initialLeft;\n    if (currentLeft < 0 || currentLeft > maxRange + Number(blockSize)) return;\n\n    Promise.all([getRect(this, '#leftDot'), getRect(this, '#rightDot')]).then(([leftDot, rightDot]) => {\n      // 点击处-halfblock 与 leftDot左侧的距离（绝对值）\n      const distanceLeft = Math.abs(pageX - leftDot.left - halfBlock);\n      // 点击处-halfblock 与 rightDot左侧的距离（绝对值）\n      const distanceRight = Math.abs(rightDot.left - pageX + halfBlock);\n      // 哪个绝对值小就移动哪个Dot\n      const isMoveLeft = distanceLeft < distanceRight;\n      if (isMoveLeft) {\n        // 当前leftdot中心 + 左侧偏移量 = 目标左侧中心距离\n        const left = pageX - initialLeft;\n        const leftValue = this.convertPosToValue(left, 0);\n        this.triggerValue([this.stepValue(leftValue), this.data._value[1]]);\n      } else {\n        const right = -(pageX - initialRight);\n        const rightValue = this.convertPosToValue(right, 1);\n\n        this.triggerValue([this.data._value[0], this.stepValue(rightValue)]);\n      }\n    });\n  }\n\n  onTouchMoveLeft(e: WechatMiniprogram.TouchEvent) {\n    const { disabled } = this.properties;\n    const { initialLeft, _value } = this.data;\n    if (disabled) return;\n\n    const [touch] = e.changedTouches;\n    const { pageX } = touch;\n    const currentLeft = pageX - initialLeft;\n\n    const newData = [...(_value as number[])];\n    const leftValue = this.convertPosToValue(currentLeft, 0);\n\n    newData[0] = this.stepValue(leftValue);\n\n    this.triggerValue(newData);\n  }\n\n  onTouchMoveRight(e: WechatMiniprogram.TouchEvent) {\n    const { disabled } = this.properties;\n    const { initialRight, _value } = this.data;\n    if (disabled) return;\n\n    const [touch] = e.changedTouches;\n    const { pageX } = touch;\n\n    const currentRight = -(pageX - initialRight);\n\n    const newData = [...(_value as number[])];\n    const rightValue = this.convertPosToValue(currentRight, 1);\n    newData[1] = this.stepValue(rightValue);\n\n    this.triggerValue(newData);\n  }\n\n  setLineStyle(left: number, right: number) {\n    const { theme } = this.properties;\n    const { blockSize, maxRange } = this.data;\n    const halfBlock = (theme as any) === 'capsule' ? Number(blockSize) / 2 : 0;\n    const [a, b] = this.data._value as any;\n    const cut = (v) => parseInt(v, 10);\n\n    this.setData({\n      dotTopValue: [a, b],\n    });\n\n    if (left + right <= maxRange) {\n      this.setData({\n        lineLeft: cut(left + halfBlock),\n        lineRight: cut(right + halfBlock),\n      });\n    } else {\n      this.setData({\n        lineLeft: cut(maxRange + halfBlock - right),\n        lineRight: cut(maxRange - left + halfBlock * 1.5),\n      });\n    }\n  }\n}\n"]}