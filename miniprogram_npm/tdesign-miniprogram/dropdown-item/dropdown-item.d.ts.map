{"version":3,"sources":["../../src/dropdown-item/dropdown-item.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,gBAAgB,EAAE,cAAc,EAAe,MAAM,qBAAqB,CAAC;AAIpF,OAAO,KAAK,EAAE,mBAAmB,EAAE,MAAM,QAAQ,CAAC;AAMlD,MAAM,WAAW,iBAAkB,SAAQ,mBAAmB;CAAG;AAEjE,MAAM,CAAC,OAAO,OAAO,gBAAiB,SAAQ,cAAc;IAC1D,eAAe,WAOb;IAEF,UAAU;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAER;IAEF,IAAI;;;;;;;;;;;;;MAaF;IAEF,MAAM,MAAQ;IAEd,SAAS,EAAE,gBAAgB,CAczB;IAEF,eAAe;;;QAKb;IAEF,SAAS;;;;;MAgCP;IAEF,OAAO;;;;;;;;;MA0DL;CACH","file":"dropdown-item.d.ts","sourcesContent":["import { RelationsOptions, SuperComponent, wxComponent } from '../common/src/index';\nimport config from '../common/config';\nimport props from './props';\nimport menuProps from '../dropdown-menu/props';\nimport type { TdDropdownItemProps } from './type';\nimport { getRect } from '../common/utils';\n\nconst { prefix } = config;\nconst name = `${prefix}-dropdown-item`;\n\nexport interface DropdownItemProps extends TdDropdownItemProps {}\n@wxComponent()\nexport default class DropdownMenuItem extends SuperComponent {\n  externalClasses = [\n    `${prefix}-class`,\n    `${prefix}-class-content`,\n    `${prefix}-class-column`,\n    `${prefix}-class-column-item`,\n    `${prefix}-class-column-item-label`,\n    `${prefix}-class-footer`,\n  ];\n\n  properties = {\n    ...props,\n  };\n\n  data = {\n    prefix,\n    classPrefix: name,\n    show: false,\n    top: 0,\n    maskHeight: 0,\n    initValue: null,\n    hasChanged: false,\n    duration: menuProps.duration.value,\n    zIndex: menuProps.zIndex.value,\n    overlay: menuProps.showOverlay.value,\n    labelAlias: 'label',\n    valueAlias: 'value',\n  };\n\n  parent = null;\n\n  relations: RelationsOptions = {\n    '../dropdown-menu/dropdown-menu': {\n      type: 'parent',\n      linked(target) {\n        const { zIndex, duration, showOverlay } = target.properties;\n\n        this.parent = target;\n        this.setData({\n          zIndex,\n          duration,\n          showOverlay,\n        });\n      },\n    },\n  };\n\n  controlledProps = [\n    {\n      key: 'value',\n      event: 'change',\n    },\n  ];\n\n  observers = {\n    keys(obj) {\n      this.setData({\n        labelAlias: obj.label || 'label',\n        valueAlias: obj.value || 'value',\n      });\n    },\n    value(v) {\n      const { options, labelAlias, valueAlias } = this.data;\n\n      if (this.data.multiple) {\n        if (!Array.isArray(v)) throw TypeError('应传入数组类型的 value');\n      }\n\n      const target = options.find((item) => item[valueAlias] === v);\n\n      if (target) {\n        this.setData({\n          label: target[labelAlias],\n        });\n      }\n    },\n    label() {\n      this.parent?.getAllItems();\n    },\n    show(visible) {\n      if (visible) {\n        this.getParentBottom(this.parent, () => {\n          this.setData({ wrapperVisible: true });\n        });\n      }\n    },\n  };\n\n  methods = {\n    closeDropdown() {\n      this.parent?.setData({\n        activeIdx: -1,\n      });\n      this.setData({\n        show: false,\n      });\n    },\n\n    getParentBottom(parent, cb) {\n      getRect(parent, `#${prefix}-bar`).then((rect) => {\n        this.setData(\n          {\n            top: rect.bottom,\n            maskHeight: rect.top,\n          },\n          cb,\n        );\n      });\n    },\n\n    handleTreeClick(e) {\n      const { level, value: itemValue } = e.currentTarget.dataset;\n      const { value } = this.data;\n\n      value[level] = itemValue;\n      this._trigger('change', { value });\n    },\n\n    handleRadioChange(e) {\n      const { value } = e.detail;\n\n      this._trigger('change', { value });\n\n      if (!this.data.multiple) {\n        this.closeDropdown();\n      }\n    },\n\n    handleMaskClick() {\n      if (this.parent?.properties.closeOnClickOverlay) {\n        this.closeDropdown();\n      }\n    },\n\n    handleReset() {\n      this._trigger('change', { value: [] });\n    },\n\n    handleConfirm() {\n      this._trigger('confirm', { value: this.data.value });\n      this.closeDropdown();\n    },\n\n    onLeaved() {\n      this.setData({ wrapperVisible: false });\n    },\n  };\n}\n"]}