{"version":3,"sources":["../../src/checkbox/checkbox.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,cAAc,EAAe,qBAAqB,EAAE,gBAAgB,EAAE,MAAM,qBAAqB,CAAC;AAO3G,MAAM,CAAC,OAAO,OAAO,QAAS,SAAQ,cAAc;IAClD,eAAe,WAMb;IAEF,SAAS,WAAuB;IAEhC,SAAS,EAAE,gBAAgB,CAwBzB;IAEF,OAAO,EAAE,qBAAqB,CAG5B;IAEF,UAAU;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAUR;IAEF,IAAI;;;MAGF;IAEF,eAAe;;;QAKb;IAEF,OAAO;oBACO,4BAA4B;MAqBxC;CACH","file":"checkbox.d.ts","sourcesContent":["import { SuperComponent, wxComponent, ComponentsOptionsType, RelationsOptions } from '../common/src/index';\nimport config from '../common/config';\nimport Props from './props';\n\nconst { prefix } = config;\nconst name = `${prefix}-checkbox`;\n@wxComponent()\nexport default class CheckBox extends SuperComponent {\n  externalClasses = [\n    `${prefix}-class`,\n    `${prefix}-class-label`,\n    `${prefix}-class-icon`,\n    `${prefix}-class-content`,\n    `${prefix}-class-border`,\n  ];\n\n  behaviors = ['wx://form-field'];\n\n  relations: RelationsOptions = {\n    '../checkbox-group/checkbox-group': {\n      type: 'ancestor',\n      linked(parent) {\n        const { value, disabled, borderless } = parent.data;\n        const valueSet = new Set(value);\n        const data: any = {\n          disabled: disabled || this.data.disabled,\n        };\n\n        if (borderless) {\n          data.borderless = true;\n        }\n\n        data.checked = valueSet.has(this.data.value);\n\n        if (this.data.checkAll) {\n          data.checked = valueSet.size > 0;\n          // data.indeterminate =\n        }\n\n        this.setData(data);\n      },\n    },\n  };\n\n  options: ComponentsOptionsType = {\n    multipleSlots: true,\n    // styleIsolation: 'shared',\n  };\n\n  properties = {\n    ...Props,\n    theme: {\n      type: String,\n      value: 'default',\n    },\n    borderless: {\n      type: Boolean,\n      value: false,\n    },\n  };\n\n  data = {\n    prefix,\n    classPrefix: name,\n  };\n\n  controlledProps = [\n    {\n      key: 'checked',\n      event: 'change',\n    },\n  ];\n\n  methods = {\n    onChange(e: WechatMiniprogram.TouchEvent) {\n      const { disabled, readonly } = this.data;\n\n      if (disabled || readonly) return;\n\n      const { target } = e.currentTarget.dataset;\n      const { contentDisabled } = this.data;\n\n      if (target === 'text' && contentDisabled) {\n        return;\n      }\n\n      const checked = !this.data.checked;\n      const parent = this.$parent;\n\n      if (parent) {\n        parent.updateValue({ ...this.data, checked });\n      } else {\n        this._trigger('change', { checked });\n      }\n    },\n  };\n}\n"]}