{"version":3,"sources":["../../src/skeleton/skeleton.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,cAAc,EAAe,MAAM,qBAAqB,CAAC;AAGlE,OAAO,EAAE,iBAAiB,EAAE,MAAM,QAAQ,CAAC;AAC3C,OAAO,EAAE,SAAS,EAAE,MAAM,EAAE,MAAM,kBAAkB,CAAC;AAoBrD,MAAM,CAAC,OAAO,OAAO,QAAS,SAAQ,cAAc;IAClD,eAAe,WAAqE;IAEpF,UAAU,mCAAS;IAEnB,IAAI;;;;MAIF;IAEF,SAAS;;MAIP;IAEF,SAAS;;MAIP;IAEF,OAAO;;6BA2CgB,iBAAiB,GAAG,SAAS;6BAQ7B,iBAAiB,GAAG,MAAM;MAyB/C;CACH","file":"skeleton.d.ts","sourcesContent":["import { SuperComponent, wxComponent } from '../common/src/index';\nimport config from '../common/config';\nimport props from './props';\nimport { SkeletonRowColObj } from './type';\nimport { ClassName, Styles } from '../common/common';\nimport { isNumber, classNames } from '../common/utils';\n\nconst { prefix } = config;\nconst name = `${prefix}-skeleton`;\n\nconst ThemeMap = {\n  avatar: [{ type: 'circle', size: '96rpx' }],\n  image: [{ type: 'rect', size: '144rpx' }],\n  text: [\n    [\n      { width: '24%', height: '32rpx', marginRight: '32rpx' },\n      { width: '76%', height: '32rpx' },\n    ],\n    1,\n  ],\n  paragraph: [1, 1, 1, { width: '55%' }],\n};\n\n@wxComponent()\nexport default class Skeleton extends SuperComponent {\n  externalClasses = [`${prefix}-class`, `${prefix}-class-col`, `${prefix}-class-row`];\n\n  properties = props;\n\n  data = {\n    prefix,\n    classPrefix: name,\n    parsedRowcols: [],\n  };\n\n  observers = {\n    rowCol() {\n      this.init();\n    },\n  };\n\n  lifetimes = {\n    attached() {\n      this.init();\n    },\n  };\n\n  methods = {\n    init() {\n      const { theme, rowCol } = this.properties;\n      const rowCols = [];\n      if (rowCol.length) {\n        rowCols.push(...rowCol);\n      } else {\n        rowCols.push(...ThemeMap[theme || 'text']);\n      }\n\n      const parsedRowcols = rowCols.map((item) => {\n        if (isNumber(item)) {\n          return [\n            {\n              class: this.getColItemClass({ type: 'text' }),\n              style: {},\n            },\n          ];\n        }\n        if (Array.isArray(item)) {\n          return item.map((col) => {\n            return {\n              ...col,\n              class: this.getColItemClass(col),\n              style: this.getColItemStyle(col),\n            };\n          });\n        }\n\n        const nItem = item as SkeletonRowColObj;\n        return [\n          {\n            ...nItem,\n            class: this.getColItemClass(nItem),\n            style: this.getColItemStyle(nItem),\n          },\n        ];\n      });\n\n      this.setData({\n        parsedRowcols,\n      });\n    },\n    getColItemClass(obj: SkeletonRowColObj): ClassName {\n      return classNames([\n        `${name}__col`,\n        `${name}--type-${obj.type || 'text'}`,\n        `${name}--animation-${this.properties.animation}`,\n      ]);\n    },\n\n    getColItemStyle(obj: SkeletonRowColObj): Styles {\n      const styleName = [\n        'width',\n        'height',\n        'marginRight',\n        'marginLeft',\n        'margin',\n        'size',\n        'background',\n        'backgroundColor',\n        'borderRadius',\n      ];\n      const style: Styles = {};\n      styleName.forEach((name) => {\n        if (name in obj) {\n          const px = isNumber(obj[name]) ? `${obj[name]}px` : obj[name];\n          if (name === 'size') {\n            [style.width, style.height] = [px, px];\n          } else {\n            style[name] = px;\n          }\n        }\n      });\n      return style;\n    },\n  };\n}\n"]}