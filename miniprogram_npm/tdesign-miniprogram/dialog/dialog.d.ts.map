{"version":3,"sources":["../../src/dialog/dialog.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,cAAc,EAAe,MAAM,qBAAqB,CAAC;AASlE,MAAM,CAAC,OAAO,OAAO,MAAO,SAAQ,cAAc;IAChD,OAAO;;;MAGL;IAEF,eAAe,WAMb;IAEF,UAAU,iCAAS;IAEnB,IAAI;;;;MAIF;IAEF,SAAS;;MAyCP;IAEF,OAAO;;;;;;;2BAgEc,MAAM;;;MAezB;CACH","file":"dialog.d.ts","sourcesContent":["import { SuperComponent, wxComponent } from '../common/src/index';\nimport config from '../common/config';\nimport props from './props';\nimport { isObject, toCamel } from '../common/utils';\n\nconst { prefix } = config;\nconst name = `${prefix}-dialog`;\n\n@wxComponent()\nexport default class Dialog extends SuperComponent {\n  options = {\n    multipleSlots: true, // 在组件定义时的选项中启用多slot支持\n    addGlobalClass: true,\n  };\n\n  externalClasses = [\n    `${prefix}-class`,\n    `${prefix}-class-content`,\n    `${prefix}-class-confirm`,\n    `${prefix}-class-cancel`,\n    `${prefix}-class-action`,\n  ];\n\n  properties = props;\n\n  data = {\n    prefix,\n    classPrefix: name,\n    buttonVariant: 'text',\n  };\n\n  observers = {\n    'confirmBtn, cancelBtn'(confirm, cancel) {\n      const { prefix, classPrefix, buttonLayout } = this.data;\n      const rect: Record<string, any> = { buttonVariant: 'text' };\n      const useBaseVariant = [confirm, cancel].some(\n        (item) => isObject(item) && item.variant && item.variant !== 'text',\n      );\n      const buttonMap = { confirm, cancel };\n      const cls = [`${classPrefix}__button`];\n      const externalCls = [];\n\n      if (useBaseVariant) {\n        rect.buttonVariant = 'base';\n        cls.push(`${classPrefix}__button--${buttonLayout}`);\n      } else {\n        cls.push(`${classPrefix}__button--text`);\n        externalCls.push(`${classPrefix}-button`);\n      }\n\n      Object.keys(buttonMap).forEach((key) => {\n        const btn = buttonMap[key];\n        const base: Record<string, any> = {\n          block: true,\n          class: [...cls, `${classPrefix}__button--${key}`],\n          externalClass: [...externalCls, `${prefix}-class-${key}`],\n          variant: rect.buttonVariant,\n        };\n\n        if (key === 'cancel' && rect.buttonVariant === 'base') {\n          base.theme = 'light';\n        }\n\n        if (typeof btn === 'string') {\n          rect[`_${key}`] = { ...base, content: btn };\n        } else if (btn && typeof btn === 'object') {\n          rect[`_${key}`] = { ...base, ...btn };\n        }\n      });\n\n      this.setData({ ...rect });\n    },\n  };\n\n  methods = {\n    onTplButtonTap(e) {\n      const evtType = e.type;\n      const { type, extra } = e.target.dataset;\n      const button = this.data[`_${type}`];\n      const cbName = `bind${evtType}`;\n\n      if (type === 'action') {\n        this.onActionTap(extra);\n        return;\n      }\n\n      if (typeof button[cbName] === 'function') {\n        const closeFlag = button[cbName](e);\n        if (closeFlag) {\n          this.close();\n        }\n      }\n\n      const hasOpenType = 'openType' in button;\n      if (!hasOpenType && ['confirm', 'cancel'].includes(type)) {\n        this[toCamel(`on-${type}`)]?.(type);\n      }\n\n      if (evtType !== 'tap') {\n        const success = e.detail?.errMsg.indexOf('ok') > -1;\n        this.triggerEvent(success ? 'open-type-event' : 'open-type-error-event', e.detail);\n      }\n    },\n\n    onConfirm() {\n      this.triggerEvent('confirm');\n      if (this._onComfirm) {\n        this._onComfirm();\n        this.close();\n      }\n    },\n\n    onCancel() {\n      this.triggerEvent('close', { trigger: 'cancel' });\n      this.triggerEvent('cancel');\n\n      if (this._onCancel) {\n        this._onCancel();\n        this.close();\n      }\n    },\n\n    onClose() {\n      this.triggerEvent('close', { trigger: 'close-btn' });\n      this.close();\n    },\n\n    close() {\n      this.setData({ visible: false });\n    },\n\n    overlayClick() {\n      if (this.properties.closeOnOverlayClick) {\n        this.triggerEvent('close', { trigger: 'overlay' });\n      }\n      this.triggerEvent('overlayClick');\n    },\n\n    onActionTap(index: number) {\n      this.triggerEvent('action', { index });\n      if (this._onAction) {\n        this._onAction({ index });\n        this.close();\n      }\n    },\n\n    openValueCBHandle(e) {\n      this.triggerEvent('open-type-event', e.detail);\n    },\n\n    openValueErrCBHandle(e) {\n      this.triggerEvent('open-type-error-event', e.detail);\n    },\n  };\n}\n"]}