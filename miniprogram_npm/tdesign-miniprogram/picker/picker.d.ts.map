{"version":3,"sources":["../../src/picker/picker.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,cAAc,EAAe,gBAAgB,EAAE,MAAM,qBAAqB,CAAC;AAQpF,MAAM,CAAC,OAAO,OAAO,MAAO,SAAQ,cAAc;IAChD,UAAU,iCAAS;IAEnB,eAAe,WAAqG;IAEpH,OAAO;;MAEL;IAEF,SAAS,EAAE,gBAAgB,CAOzB;IAEF,SAAS;;MAIP;IAEF,IAAI;;;MAGF;IAEF,OAAO;;;;;;;;;;;;MA4DL;IAEF,KAAK;CAGN","file":"picker.d.ts","sourcesContent":["import { SuperComponent, wxComponent, RelationsOptions } from '../common/src/index';\nimport config from '../common/config';\nimport props from './props';\n\nconst { prefix } = config;\nconst name = `${prefix}-picker`;\n\n@wxComponent()\nexport default class Picker extends SuperComponent {\n  properties = props;\n\n  externalClasses = [`${prefix}-class`, `${prefix}-class-confirm`, `${prefix}-class-cancel`, `${prefix}-class-title`];\n\n  options = {\n    multipleSlots: true,\n  };\n\n  relations: RelationsOptions = {\n    '../picker-item/picker-item': {\n      type: 'child',\n      linked(this: Picker) {\n        this.updateChildren();\n      },\n    },\n  };\n\n  observers = {\n    value() {\n      this.updateChildren();\n    },\n  };\n\n  data = {\n    prefix,\n    classPrefix: name,\n  };\n\n  methods = {\n    updateChildren() {\n      const { value } = this.properties;\n\n      this.$children.forEach((child, index) => {\n        child.setData({\n          value: value?.[index] || '',\n          siblingCount: this.$children.length,\n        });\n        child.update();\n      });\n    },\n\n    getSelectedValue() {\n      const value = this.$children.map((item) => item._selectedValue);\n      const label = this.$children.map((item) => item._selectedLabel);\n      return [value, label];\n    },\n\n    getColumnIndexes() {\n      const columns = this.$children.map((pickerColumn, columnIndex) => {\n        return {\n          column: columnIndex,\n          index: pickerColumn._selectedIndex,\n        };\n      });\n      return columns;\n    },\n\n    onConfirm() {\n      const [value, label] = this.getSelectedValue();\n      const columns = this.getColumnIndexes();\n\n      this.close();\n      this.triggerEvent('change', { value, label, columns });\n      this.triggerEvent('confirm', { value, label, columns });\n    },\n\n    triggerColumnChange({ column, index }) {\n      const [value, label] = this.getSelectedValue();\n      this.triggerEvent('pick', { value, label, column, index });\n    },\n\n    onCancel() {\n      this.close();\n      this.triggerEvent('cancel');\n    },\n\n    onPopupChange(e) {\n      const { visible } = e.detail;\n\n      this.close();\n      this.triggerEvent('visible-change', { visible });\n    },\n\n    close() {\n      if (this.data.autoClose) {\n        this.setData({ visible: false });\n      }\n    },\n  };\n\n  ready() {\n    this.$children.map((column, index) => (column.columnIndex = index));\n  }\n}\n"]}