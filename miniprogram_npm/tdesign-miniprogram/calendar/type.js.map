{"version":3,"sources":["../../src/calendar/type.ts"],"names":[],"mappings":"AAAA,oBAAoB","file":"type.js","sourcesContent":["/* eslint-disable */\n\n/**\n * 该文件为脚本自动生成文件，请勿随意修改。如需修改请联系 PMC\n * */\n\nimport { ButtonProps } from '../button/index';\n\nexport interface TdCalendarProps {\n  /**\n   * 自动关闭；在点击关闭按钮、确认按钮、遮罩层时自动关闭，不需要手动设置 visible\n   * @default true\n   */\n  autoClose?: {\n    type: BooleanConstructor;\n    value?: boolean;\n  };\n  /**\n   * 确认按钮。值为 null 则不显示确认按钮。值类型为字符串，则表示自定义按钮文本，值类型为 Object 则表示透传 Button 组件属性。\n   * @default ''\n   */\n  confirmBtn?: {\n    type: null;\n    value?: string | ButtonProps | null;\n  };\n  /**\n   * 自定义组件样式\n   * @default ''\n   */\n  style?: {\n    type: StringConstructor;\n    value?: string;\n  };\n  /**\n   * 第一天从星期几开始，默认 0 = 周日\n   * @default 0\n   */\n  firstDayOfWeek?: {\n    type: NumberConstructor;\n    value?: number;\n  };\n  /**\n   * 用于格式化日期的函数\n   */\n  format?: {\n    type: undefined;\n    value?: CalendarFormatType;\n  };\n  /**\n   * 最大可选的日期，不传则默认半年后\n   */\n  maxDate?: {\n    type: NumberConstructor;\n    value?: number;\n  };\n  /**\n   * 最小可选的日期，不传则默认今天\n   */\n  minDate?: {\n    type: NumberConstructor;\n    value?: number;\n  };\n  /**\n   * 标题，不传默认为“请选择日期”\n   */\n  title?: {\n    type: StringConstructor;\n    value?: string;\n  };\n  /**\n   * 日历的选择类型，single = 单选；multiple = 多选; range = 区间选择\n   * @default single\n   */\n  type?: {\n    type: StringConstructor;\n    value?: 'single' | 'multiple' | 'range';\n  };\n  /**\n   * 是否使用弹出层包裹日历\n   * @default true\n   */\n  usePopup?: {\n    type: BooleanConstructor;\n    value?: boolean;\n  };\n  /**\n   * 当前选择的日期，不传则默认今天，当 type = multiple 或 range 时传入数组\n   */\n  value?: {\n    type: null;\n    value?: number | number[];\n  };\n  /**\n   * 当前选择的日期，不传则默认今天，当 type = multiple 或 range 时传入数组，非受控属性\n   */\n  defaultValue?: {\n    type: null;\n    value?: number | number[];\n  };\n  /**\n   * 是否显示日历；`usePopup` 为 true 时有效\n   * @default false\n   */\n  visible?: {\n    type: BooleanConstructor;\n    value?: boolean;\n  };\n}\n\nexport type CalendarFormatType = (day: TDate) => TDate;\n\nexport type TDateType = 'selected' | 'disabled' | 'start' | 'centre' | 'end' | '';\n\nexport interface TDate {\n  date: Date;\n  day: number;\n  type: TDateType;\n  className?: string;\n  prefix?: string;\n  suffix?: string;\n}\n"]}