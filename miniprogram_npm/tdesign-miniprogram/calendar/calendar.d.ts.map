{"version":3,"sources":["../../src/calendar/calendar.ts"],"names":[],"mappings":";AAAA,OAAO,EAAE,cAAc,EAAe,MAAM,qBAAqB,CAAC;AAIlE,OAAO,EAAE,eAAe,EAAE,MAAM,QAAQ,CAAC;AAKzC,MAAM,WAAW,aAAc,SAAQ,eAAe;CAAG;AAGzD,MAAM,CAAC,OAAO,OAAO,QAAS,SAAQ,cAAc;IAClD,eAAe,WAAuB;IAEtC,OAAO,EAAE,iBAAiB,CAAC,SAAS,CAAC,gBAAgB,CAGnD;IAEF,UAAU,kBAAS;IAEnB,IAAI;;;;;;;;MAMF;IAEF,eAAe;;;QASb;IAEF,SAAS;;MASP;IAEF,SAAS;;;;;MA+BP;IAEF,OAAO;;;;;;;;;;MAmFL;CACH","file":"calendar.d.ts","sourcesContent":["import { SuperComponent, wxComponent } from '../common/src/index';\nimport config from '../common/config';\nimport props from './props';\nimport TCalendar from '../common/shared/calendar/index';\nimport { TdCalendarProps } from './type';\n\nconst { prefix } = config;\nconst name = `${prefix}-calendar`;\n\nexport interface CalendarProps extends TdCalendarProps {}\n\n@wxComponent()\nexport default class Calendar extends SuperComponent {\n  externalClasses = [`${prefix}-class`];\n\n  options: WechatMiniprogram.Component.ComponentOptions = {\n    multipleSlots: true,\n    styleIsolation: 'apply-shared',\n  };\n\n  properties = props;\n\n  data = {\n    prefix,\n    classPrefix: name,\n    months: [],\n    scrollIntoView: '',\n    innerConfirmBtn: { content: '确定' },\n  };\n\n  controlledProps = [\n    {\n      key: 'value',\n      event: 'confirm',\n    },\n    {\n      key: 'value',\n      event: 'change',\n    },\n  ];\n\n  lifetimes = {\n    ready() {\n      this.base = new TCalendar(this.properties);\n      this.initialValue();\n      this.setData({\n        days: this.base.getDays(),\n      });\n      this.calcMonths();\n    },\n  };\n\n  observers = {\n    confirmBtn(v) {\n      if (typeof v === 'string') {\n        this.setData({ innerConfirmBtn: v === 'slot' ? 'slot' : { content: v } });\n      } else if (typeof v === 'object') {\n        this.setData({ innerConfirmBtn: v });\n      }\n    },\n    'firstDayOfWeek,minDate,maxDate'(firstDayOfWeek, minDate, maxDate) {\n      if (this.base) {\n        this.base.firstDayOfWeek = firstDayOfWeek;\n        this.base.minDate = minDate;\n        this.base.maxDate = maxDate;\n        this.calcMonths();\n      }\n    },\n    value(v) {\n      if (this.base) {\n        this.base.value = v;\n      }\n    },\n    visible(v) {\n      if (v) {\n        this.scrollIntoView();\n\n        if (this.base) {\n          this.base.value = this.data.value;\n          this.calcMonths();\n        }\n      }\n    },\n  };\n\n  methods = {\n    initialValue() {\n      const { value, type, minDate } = this.data;\n\n      if (!value) {\n        const today = new Date();\n        const now = minDate || new Date(today.getFullYear(), today.getMonth(), today.getDate()).getTime(); // 获取 0 点的时间戳\n        const initialValue = type === 'single' ? now : [now];\n\n        if (type === 'range') {\n          initialValue[1] = now + 24 * 3600 * 1000; // 第二天\n        }\n\n        this.setData({\n          value: initialValue,\n        });\n        this.base.value = initialValue;\n      }\n    },\n    scrollIntoView() {\n      const { value } = this.data;\n\n      if (!value) return;\n\n      const date = new Date(Array.isArray(value) ? value[0] : value);\n\n      if (date) {\n        this.setData({\n          scrollIntoView: `year_${date.getFullYear()}_month_${date.getMonth()}`,\n        });\n      }\n    },\n    calcMonths() {\n      const months = this.base.getMonths();\n\n      this.setData({\n        months,\n      });\n    },\n    close(trigger) {\n      if (this.data.autoClose) {\n        this.setData({ visible: false });\n      }\n      this.triggerEvent('close', { trigger });\n    },\n    onVisibleChange() {\n      this.close('overlay');\n    },\n    handleClose() {\n      this.close('close-btn');\n    },\n    handleSelect(e) {\n      const { date, year, month } = e.currentTarget.dataset;\n\n      if (date.type === 'disabled') return;\n\n      const rawValue = this.base.select({ cellType: date.type, year, month, date: date.day });\n      const value = this.toTime(rawValue);\n      this.calcMonths();\n\n      if (this.data.confirmBtn == null) {\n        // 不显示确认按钮，则选择完即关闭 popup\n        if (this.data.type === 'single' || rawValue.length === 2) {\n          this.setData({ visible: false });\n          this._trigger('change', { value }); // 受控\n        }\n      }\n\n      this.triggerEvent('select', { value });\n    },\n    onTplButtonTap() {\n      const rawValue = this.base.getTrimValue();\n      const value = this.toTime(rawValue);\n\n      this.close('confirm-btn');\n      this._trigger('confirm', { value });\n    },\n    toTime(val) {\n      if (Array.isArray(val)) {\n        return val.map((item) => item.getTime());\n      }\n      return val.getTime();\n    },\n  };\n}\n"]}