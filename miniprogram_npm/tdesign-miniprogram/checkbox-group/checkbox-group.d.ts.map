{"version":3,"sources":["../../src/checkbox-group/checkbox-group.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,cAAc,EAAe,gBAAgB,EAAE,MAAM,qBAAqB,CAAC;AAOpF,MAAM,CAAC,OAAO,OAAO,aAAc,SAAQ,cAAc;IACvD,eAAe,WAAgC;IAE/C,SAAS,EAAE,gBAAgB,CAIzB;IAEF,IAAI;;;;MAIF;IAEF,UAAU;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAMR;IAEF,SAAS;;MAIP;IAEF,SAAS;;;MAOP;IAEF,eAAe;;;QAKb;IAEF,SAAS,MAAQ;IAEjB,OAAO;;;;;;;;;;;;MA6GL;CACH","file":"checkbox-group.d.ts","sourcesContent":["import { SuperComponent, wxComponent, RelationsOptions } from '../common/src/index';\nimport config from '../common/config';\nimport props from './props';\n\nconst { prefix } = config;\nconst name = `${prefix}-checkbox-group`;\n@wxComponent()\nexport default class CheckBoxGroup extends SuperComponent {\n  externalClasses = ['class', `${prefix}-class`];\n\n  relations: RelationsOptions = {\n    '../checkbox/checkbox': {\n      type: 'descendant',\n    },\n  };\n\n  data = {\n    prefix,\n    classPrefix: name,\n    checkboxOptions: [],\n  };\n\n  properties = {\n    ...props,\n    borderless: {\n      type: Boolean,\n      value: false,\n    },\n  };\n\n  observers = {\n    value() {\n      this.updateChildren();\n    },\n  };\n\n  lifetimes = {\n    attached() {\n      this.initWithOptions();\n    },\n    ready() {\n      this.setCheckall();\n    },\n  };\n\n  controlledProps = [\n    {\n      key: 'value',\n      event: 'change',\n    },\n  ];\n\n  $checkAll = null; // 全选复选框\n\n  methods = {\n    getChilds() {\n      let items = this.$children;\n      if (!items.length) {\n        items = this.selectAllComponents(`.${prefix}-checkbox-option`);\n      }\n      return items || [];\n    },\n\n    updateChildren() {\n      const items = this.getChilds();\n      const { value } = this.data;\n\n      if (items.length > 0) {\n        items.forEach((item: any) => {\n          !item.data.checkAll &&\n            item.setData({\n              checked: value?.includes(item.data.value),\n            });\n        });\n        // 关联可全选项\n        if (items.some((item) => item.data.checkAll)) {\n          this.setCheckall();\n        }\n      }\n    },\n\n    updateValue({ value, checked, checkAll, indeterminate }) {\n      let { value: newValue } = this.data;\n      const { max } = this.data;\n      const keySet = new Set(this.getChilds().map((item) => item.data.value));\n\n      newValue = newValue.filter((value) => keySet.has(value));\n\n      if (max && checked && newValue.length === max) return;\n\n      if (checkAll) {\n        const items = this.getChilds();\n        newValue =\n          !checked && indeterminate\n            ? items.map((item) => item.data.value)\n            : items\n                .filter(({ data }) => {\n                  if (data.disabled) {\n                    return newValue.includes(data.value);\n                  }\n                  return checked && !data.checkAll;\n                })\n                .map(({ data }) => data.value);\n      } else if (checked) {\n        newValue = newValue.concat(value);\n      } else {\n        const index = newValue.findIndex((v: string) => v === value);\n        newValue.splice(index, 1);\n      }\n\n      this._trigger('change', { value: newValue });\n    },\n\n    initWithOptions() {\n      const { options } = this.data;\n\n      if (!options?.length || !Array.isArray(options)) return;\n\n      const checkboxOptions = options.map((item) => {\n        const isLabel = ['number', 'string'].includes(typeof item);\n        return isLabel\n          ? {\n              label: `${item}`,\n              value: item,\n            }\n          : { ...item };\n      });\n\n      this.setData({\n        checkboxOptions,\n      });\n    },\n\n    handleInnerChildChange(e) {\n      const { item } = e.target.dataset;\n      const { checked } = e.detail;\n      const rect: any = {};\n\n      if (item.checkAll) {\n        rect.indeterminate = this.$checkAll?.data.indeterminate;\n      }\n\n      this.updateValue({ ...item, checked, ...rect });\n    },\n\n    setCheckall() {\n      const items = this.getChilds();\n\n      if (!this.$checkAll) {\n        this.$checkAll = items.find((item) => item.data.checkAll);\n      }\n\n      if (!this.$checkAll) return;\n\n      const { value } = this.data;\n      const valueSet = new Set(value.filter((val) => val !== this.$checkAll.data.value));\n      const isCheckall = items.every((item) => (item.data.checkAll ? true : valueSet.has(item.data.value)));\n\n      this.$checkAll.setData({\n        checked: valueSet.size > 0,\n        indeterminate: !isCheckall,\n      });\n    },\n  };\n}\n"]}