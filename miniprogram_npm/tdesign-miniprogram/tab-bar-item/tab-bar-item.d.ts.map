{"version":3,"sources":["../../src/tab-bar-item/tab-bar-item.ts"],"names":[],"mappings":"AAAA,OAAO,EAAe,cAAc,EAAE,gBAAgB,EAAE,MAAM,qBAAqB,CAAC;AASpF,MAAM,CAAC,OAAO,OAAO,UAAW,SAAQ,cAAc;IACpD,MAAM,MAAQ;IAEd,SAAS,EAAE,gBAAgB,CAezB;IAEF,OAAO;;MAEL;IAEF,IAAI;;;;;;;;;;;;MAYF;IAEF,UAAU,qCAAS;IAEnB,SAAS;yBACU,OAAO,MAAM,EAAE,GAAG,CAAC,EAAE;;MAUtC;IAEF,SAAS;;MAMP;IAEF,OAAO;;;;;;MAsCL;CACH","file":"tab-bar-item.d.ts","sourcesContent":["import { wxComponent, SuperComponent, RelationsOptions } from '../common/src/index';\nimport config from '../common/config';\nimport props from './props';\nimport { getRect, calcIcon } from '../common/utils';\n\nconst { prefix } = config;\nconst classPrefix = `${prefix}-tab-bar-item`;\n\n@wxComponent()\nexport default class TabBarItem extends SuperComponent {\n  parent = null;\n\n  relations: RelationsOptions = {\n    '../tab-bar/tab-bar': {\n      type: 'ancestor',\n      linked(parent) {\n        const { theme, split, shape } = parent.data;\n\n        this.setData({\n          theme,\n          split,\n          shape,\n          currentName: this.properties.value ? this.properties.value : parent.initName(),\n        });\n        parent.updateChildren();\n      },\n    },\n  };\n\n  options = {\n    multipleSlots: true,\n  };\n\n  data = {\n    prefix,\n    classPrefix,\n    isSpread: false,\n    isChecked: false,\n    hasChildren: false,\n    currentName: '',\n    split: true,\n    iconOnly: false,\n    theme: '',\n    crowded: false,\n    shape: 'normal',\n  };\n\n  properties = props;\n\n  observers = {\n    subTabBar(value: Record<string, any>[]) {\n      this.setData({\n        hasChildren: value.length > 0,\n      });\n    },\n    icon(v) {\n      this.setData({\n        _icon: calcIcon(v),\n      });\n    },\n  };\n\n  lifetimes = {\n    async attached() {\n      const res = await getRect(this, `.${classPrefix}__text`);\n\n      this.setData({ iconOnly: res.height === 0 });\n    },\n  };\n\n  methods = {\n    showSpread() {\n      this.setData({\n        isSpread: true,\n      });\n    },\n    toggle() {\n      const { currentName, hasChildren, isSpread } = this.data;\n\n      if (hasChildren) {\n        this.setData({\n          isSpread: !isSpread,\n        });\n      }\n      this.$parent.updateValue(currentName);\n      this.$parent.changeOtherSpread(currentName);\n    },\n    selectChild(event) {\n      const { value } = event.target.dataset;\n\n      this.$parent.updateValue(value);\n      this.setData({\n        isSpread: false,\n      });\n    },\n    checkActive(value) {\n      const { currentName, subTabBar } = this.data;\n      const isChecked = subTabBar?.some((item) => item.value === value) || currentName === value;\n\n      this.setData({\n        isChecked,\n      });\n    },\n    closeSpread() {\n      this.setData({\n        isSpread: false,\n      });\n    },\n  };\n}\n"]}