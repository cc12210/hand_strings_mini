{"version":3,"sources":["../../src/side-bar/side-bar.ts"],"names":[],"mappings":";;;;;;AAAA,OAAO,EAAE,cAAc,EAAE,WAAW,EAAoB,MAAM,qBAAqB,CAAC;AACpF,OAAO,MAAM,MAAM,kBAAkB,CAAC;AACtC,OAAO,KAAK,MAAM,SAAS,CAAC;AAE5B,MAAM,EAAE,MAAM,EAAE,GAAG,MAAM,CAAC;AAC1B,MAAM,IAAI,GAAG,GAAG,MAAM,WAAW,CAAC;AAClC,MAAM,aAAa,GAAG,gCAAgC,CAAC;AAGvD,IAAqB,OAAO,GAA5B,MAAqB,OAAQ,SAAQ,cAAc;IAAnD;;QACE,oBAAe,GAAG,CAAC,GAAG,MAAM,QAAQ,CAAC,CAAC;QAEtC,WAAM,GAAG,EAAE,CAAC;QAEZ,cAAS,GAAqB;YAC5B,CAAC,aAAa,CAAC,EAAE;gBACf,IAAI,EAAE,OAAO;gBACb,MAAM,CAAC,KAAK;oBACV,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;gBAC1B,CAAC;gBACD,QAAQ,CAAC,KAAK;oBACZ,MAAM,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,KAAK,KAAK,CAAC,CAAC;oBAC9D,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;gBAC/B,CAAC;aACF;SACF,CAAC;QAEF,oBAAe,GAAG;YAChB;gBACE,GAAG,EAAE,OAAO;gBACZ,KAAK,EAAE,QAAQ;aAChB;SACF,CAAC;QAEF,eAAU,GAAG,KAAK,CAAC;QAEnB,cAAS,GAAG;YACV,KAAK,CAAC,CAAC;gBACL,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC,IAAI,EAAE,EAAE;oBAC9B,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;gBACvB,CAAC,CAAC,CAAC;YACL,CAAC;SACF,CAAC;QAEF,SAAI,GAAG;YACL,WAAW,EAAE,IAAI;YACjB,MAAM;SACP,CAAC;QAEF,YAAO,GAAG;YACR,QAAQ,CAAC,EAAE,KAAK,EAAE,KAAK,EAAE;gBACvB,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE,EAAE,KAAK,EAAE,KAAK,EAAE,CAAC,CAAC;YAC5C,CAAC;SACF,CAAC;IACJ,CAAC;CAAA,CAAA;AA7CoB,OAAO;IAD3B,WAAW,EAAE;GACO,OAAO,CA6C3B;eA7CoB,OAAO","file":"side-bar.js","sourcesContent":["import { SuperComponent, wxComponent, RelationsOptions } from '../common/src/index';\nimport config from '../common/config';\nimport props from './props';\n\nconst { prefix } = config;\nconst name = `${prefix}-side-bar`;\nconst relationsPath = '../side-bar-item/side-bar-item';\n\n@wxComponent()\nexport default class SideBar extends SuperComponent {\n  externalClasses = [`${prefix}-class`];\n\n  childs = [];\n\n  relations: RelationsOptions = {\n    [relationsPath]: {\n      type: 'child',\n      linked(child) {\n        this.childs.push(child);\n      },\n      unlinked(child) {\n        const index = this.childs.findIndex((item) => item === child);\n        this.childs.splice(index, 1);\n      },\n    },\n  };\n\n  controlledProps = [\n    {\n      key: 'value',\n      event: 'change',\n    },\n  ];\n\n  properties = props;\n\n  observers = {\n    value(v) {\n      this.$children.forEach((item) => {\n        item.updateActive(v);\n      });\n    },\n  };\n\n  data = {\n    classPrefix: name,\n    prefix,\n  };\n\n  methods = {\n    doChange({ value, label }) {\n      this._trigger('change', { value, label });\n    },\n  };\n}\n"]}