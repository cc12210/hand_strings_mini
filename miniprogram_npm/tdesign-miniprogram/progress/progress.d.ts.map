{"version":3,"sources":["../../src/progress/progress.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,cAAc,EAAe,MAAM,qBAAqB,CAAC;AAUlE,MAAM,CAAC,OAAO,OAAO,QAAS,SAAQ,cAAc;IAClD,eAAe,WAAuE;IAEtF,OAAO;;MAEL;IAEF,UAAU,mCAAS;IAEnB,IAAI;;;;;;;MAOF;IAEF,SAAS;;;;;;MAqCP;IAEF,OAAO;;MAYL;CACH","file":"progress.d.ts","sourcesContent":["import { SuperComponent, wxComponent } from '../common/src/index';\nimport config from '../common/config';\nimport props from './props';\nimport { getBackgroundColor } from './utils';\nimport { unitConvert, getRect } from '../common/utils';\n\nconst { prefix } = config;\nconst name = `${prefix}-progress`;\n\n@wxComponent()\nexport default class Progress extends SuperComponent {\n  externalClasses = [`${prefix}-class`, `${prefix}-class-bar`, `${prefix}-class-label`];\n\n  options = {\n    multipleSlots: true,\n  };\n\n  properties = props;\n\n  data = {\n    prefix,\n    classPrefix: name,\n    colorBar: '',\n    heightBar: '',\n    computedStatus: '',\n    computedProgress: 0,\n  };\n\n  observers = {\n    percentage(percentage) {\n      percentage = Math.max(0, Math.min(percentage, 100));\n\n      this.setData({\n        computedStatus: percentage === 100 ? 'success' : '',\n        computedProgress: percentage,\n      });\n    },\n\n    color(color) {\n      this.setData({\n        colorBar: getBackgroundColor(color),\n        colorCircle: typeof color === 'object' ? '' : color, // 环形不支持渐变，单独处理\n      });\n    },\n\n    strokeWidth(strokeWidth) {\n      if (!strokeWidth) {\n        return '';\n      }\n      this.setData({\n        heightBar: unitConvert(strokeWidth),\n      });\n    },\n\n    theme(theme) {\n      if (theme === 'circle') {\n        this.getInnerDiameter();\n      }\n    },\n\n    trackColor(trackColor) {\n      this.setData({\n        bgColorBar: trackColor,\n      });\n    },\n  };\n\n  methods = {\n    getInnerDiameter() {\n      const { strokeWidth } = this.properties;\n      const wrapID = `.${name}__canvas--circle`;\n      if (strokeWidth) {\n        getRect(this, wrapID).then((wrapRect) => {\n          this.setData({\n            innerDiameter: wrapRect.width - unitConvert(strokeWidth) * 2,\n          });\n        });\n      }\n    },\n  };\n}\n"]}